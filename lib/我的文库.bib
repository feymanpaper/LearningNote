@article{alrawiBetrayalCloudCity,
  title = {The {{Betrayal At Cloud City}}: {{An Empirical Analysis Of Cloud-Based Mobile Backends}}},
  author = {Alrawi, Omar and Kasturi, Ranjita Pai and Zuo, Chaoshun and Lin, Zhiqiang and Duan, Ruian and Saltaformaggio, Brendan},
  abstract = {Cloud backends provide essential features to the mobile app ecosystem, such as content delivery, ad networks, analytics, and more. Unfortunately, app developers often disregard or have no control over prudent security practices when choosing or managing these services. Our preliminary study of the top 5,000 Google Play Store free apps identified 983 instances of N-day and 655 instances of 0-day vulnerabilities spanning across the software layers (OS, software services, communication, and web apps) of cloud backends. The mobile apps using these cloud backends represent between 1M and 500M installs each and can potentially affect hundreds of thousands of users. Further, due to the widespread use of third-party SDKs, app developers are often unaware of the backends affecting their apps and where to report vulnerabilities. This paper presents SkyWalker, a pipeline to automatically vet the backends that mobile apps contact and provide actionable remediation. For an input APK, SkyWalker extracts an enumeration of backend URLs, uses remote vetting techniques to identify software vulnerabilities and responsible parties, and reports mitigation strategies to the app developer. Our findings suggest that developers and cloud providers do not have a clear understanding of responsibilities and liabilities in regards to mobile app backends that leave many vulnerabilities exposed.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/63RX2EWS/Alrawi 等 - The Betrayal At Cloud City An Empirical Analysis .pdf}
}

@article{amalfitanoMobiGUITARAutomatedModelBased2015,
  title = {{{MobiGUITAR}}: {{Automated Model-Based Testing}} of {{Mobile Apps}}},
  shorttitle = {{{MobiGUITAR}}},
  author = {Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio and Ta, Bryan Dzung and Memon, Atif M.},
  date = {2015-09},
  journaltitle = {IEEE Software},
  volume = {32},
  number = {5},
  pages = {53--59},
  issn = {1937-4194},
  doi = {10.1109/MS.2014.55},
  abstract = {As mobile devices become increasingly smarter and more powerful, so too must the engineering of their software. User-interface-driven system testing of these devices is gaining popularity, with each vendor releasing some automation tool. However, these tools are inappropriate for amateur programmers, an increasing portion of app developers. MobiGUITAR (Mobile GUI Testing Framework) provides automated GUI-driven testing of Android apps. It's based on observation, extraction, and abstraction of GUI widgets' run-time state. The abstraction is a scalable state machine model that, together with test coverage criteria, provides a way to automatically generate test cases. When applied to four open-source Android apps, MobiGUITAR automatically generated and executed 7,711 test cases and reported 10 new bugs. Some bugs were Android-specific, stemming from the event- and activity-driven nature of Android.},
  eventtitle = {{{IEEE Software}}},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/JYEFYLR4/Amalfitano et al_2015_MobiGUITAR.pdf;/Users/feymanpaper/Zotero/storage/UJM9S9V7/6786194.html}
}

@inproceedings{amalfitanoUsingGUIRipping2012,
  title = {Using {{GUI}} Ripping for Automated Testing of {{Android}} Applications},
  booktitle = {Proceedings of the 27th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio and De Carmine, Salvatore and Memon, Atif M.},
  date = {2012-09-03},
  pages = {258--261},
  publisher = {ACM},
  location = {Essen Germany},
  doi = {10.1145/2351676.2351717},
  url = {https://dl.acm.org/doi/10.1145/2351676.2351717},
  urldate = {2023-05-18},
  abstract = {We present AndroidRipper, an automated technique that tests Android apps via their Graphical User Interface (GUI). AndroidRipper is based on a user-interface driven ripper that automatically explores the app’s GUI with the aim of exercising the application in a structured manner. We evaluate AndroidRipper on an open-source Android app. Our results show that our GUI-based test cases are able to detect severe, previously unknown, faults in the underlying code, and the structured exploration outperforms a random approach.},
  eventtitle = {{{ASE}}'12: {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  isbn = {978-1-4503-1204-2},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/GLC7EM2P/Amalfitano et al. - 2012 - Using GUI ripping for automated testing of Android.pdf}
}

@inproceedings{azimTargetedDepthfirstExploration2013,
  title = {Targeted and Depth-First Exploration for Systematic Testing of Android Apps},
  booktitle = {Proceedings of the 2013 {{ACM SIGPLAN}} International Conference on {{Object}} Oriented Programming Systems Languages \& Applications},
  author = {Azim, Tanzirul and Neamtiu, Iulian},
  date = {2013-10-29},
  pages = {641--660},
  publisher = {ACM},
  location = {Indianapolis Indiana USA},
  doi = {10.1145/2509136.2509549},
  url = {https://dl.acm.org/doi/10.1145/2509136.2509549},
  urldate = {2023-06-04},
  eventtitle = {{{SPLASH}} '13: {{Conference}} on {{Systems}}, {{Programming}}, and {{Applications}}: {{Software}} for {{Humanity}}},
  isbn = {978-1-4503-2374-1},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/Q5GBYIDT/Azim_Neamtiu_2013_Targeted and depth-first exploration for systematic testing of android apps.pdf}
}

@article{backesDemystifyingAndroidApplication,
  title = {On {{Demystifying}} the {{Android Application Framework}}: {{Re-Visiting Android Permission Speciﬁcation Analysis}}},
  author = {Backes, Michael and Bugiel, Sven and Derr, Erik and McDaniel, Patrick and Octeau, Damien and Weisgerber, Sebastian},
  abstract = {In contrast to the Android application layer, Android’s application framework’s internals and their influence on the platform security and user privacy are still largely a black box for us. In this paper, we establish a static runtime model of the application framework in order to study its internals and provide the first high-level classification of the framework’s protected resources. We thereby uncover design patterns that differ highly from the runtime model at the application layer. We demonstrate the benefits of our insights for security-focused analysis of the framework by re-visiting the important use-case of mapping Android permissions to framework/SDK API methods. We, in particular, present a novel mapping based on our findings that significantly improves on prior results in this area that were established based on insufficient knowledge about the framework’s internals. Moreover, we introduce the concept of permission locality to show that although framework services follow the principle of separation of duty, the accompanying permission checks to guard sensitive operations violate it.},
  langid = {english},
  note = {wdajdsja},
  file = {/Users/feymanpaper/Zotero/storage/8774RPWP/Backes 等 - On Demystifying the Android Application Framework.pdf}
}

@inproceedings{baekAutomatedModelbasedAndroid2016,
  title = {Automated Model-Based {{Android GUI}} Testing Using Multi-Level {{GUI}} Comparison Criteria},
  booktitle = {Proceedings of the 31st {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Baek, Young-Min and Bae, Doo-Hwan},
  year = {8 月 25, 2016},
  series = {{{ASE}} '16},
  pages = {238--249},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2970276.2970313},
  url = {https://dl.acm.org/doi/10.1145/2970276.2970313},
  urldate = {2023-06-03},
  abstract = {Automated Graphical User Interface (GUI) testing is one of the most widely used techniques to detect faults in mobile applications (apps) and to test functionality and usability. GUI testing exercises behaviors of an application under test (AUT) by executing events on GUIs and checking whether the app behaves correctly. In particular, because Android leads in market share of mobile OS platforms, a lot of research on automated Android GUI testing techniques has been performed. Among various techniques, we focus on model-based Android GUI testing that utilizes a GUI model for systematic test generation and effective debugging support. Since test inputs are generated based on the underlying model, accurate GUI modeling of an AUT is the most crucial factor in order to generate effective test inputs. However, most modern Android apps contain a number of dynamically constructed GUIs that make accurate behavior modeling more challenging. To address this problem, we propose a set of multi-level GUI Comparison Criteria (GUICC) that provides the selection of multiple abstraction levels for GUI model generation. By using multilevel GUICC, we conducted empirical experiments to identify the influence of GUICC on testing effectiveness. Results show that our approach, which performs model-based testing with multi-level GUICC, achieved higher effectiveness than activity-based GUI model generation. We also found that multi-level GUICC can alleviate the inherent state explosion problems of existing a single-level GUICC for behavior modeling of real-world Android apps by flexibly manipulating GUICC.},
  isbn = {978-1-4503-3845-5},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/R9Y3XVCJ/Baek_Bae_2016_Automated model-based Android GUI testing using multi-level GUI comparison.pdf}
}

@inproceedings{bongard-blanchyAmDefinitelyManipulated2021,
  title = {”{{I}} Am {{Definitely Manipulated}}, {{Even When I}} Am {{Aware}} of It. {{It}}’s {{Ridiculous}}!” - {{Dark Patterns}} from the {{End-User Perspective}}},
  booktitle = {Designing {{Interactive Systems Conference}} 2021},
  author = {Bongard-Blanchy, Kerstin and Rossi, Arianna and Rivas, Salvador and Doublet, Sophie and Koenig, Vincent and Lenzini, Gabriele},
  date = {2021-06-28},
  pages = {763--776},
  publisher = {ACM},
  location = {Virtual Event USA},
  doi = {10.1145/3461778.3462086},
  url = {https://dl.acm.org/doi/10.1145/3461778.3462086},
  urldate = {2024-04-15},
  abstract = {Online services pervasively employ manipulative designs (i.e., dark patterns) to influence users to purchase goods and subscriptions, spend more time on-site, or mindlessly accept the harvesting of their personal data. To protect users from the lure of such designs, we asked: are users aware of the presence of dark patterns? If so, are they able to resist them? By surveying 406 individuals, we found that they are generally aware of the influence that manipulative designs can exert on their online behaviour. However, being aware does not equip users with the ability to oppose such influence. We further find that respondents, especially younger ones, often recognise the "darkness" of certain designs, but remain unsure of the actual harm they may suffer. Finally, we discuss a set of interventions (e.g., bright patterns, design frictions, training games, applications to expedite legal enforcement) in the light of our findings.},
  eventtitle = {{{DIS}} '21: {{Designing Interactive Systems Conference}} 2021},
  isbn = {978-1-4503-8476-6},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/DHBK36MV/Bongard-Blanchy et al. - 2021 - ”I am Definitely Manipulated, Even When I am Aware.pdf}
}

@article{bonneExploringDecisionMaking,
  title = {Exploring Decision Making with {{Android}}’s Runtime Permission Dialogs Using in-Context Surveys},
  author = {Bonné, Bram},
  abstract = {A great deal of research on the management of user data on smartphones via permission systems has revealed significant levels of user discomfort, lack of understanding, and lack of attention. The majority of these studies were conducted on Android devices before runtime permission dialogs were widely deployed. In this paper we explore how users make decisions with runtime dialogs on smartphones with Android 6.0 or higher. We employ an experience sampling methodology in order to ask users the reasons influencing their decisions immediately after they decide. We conducted a longitudinal survey with 157 participants over a 6 week period.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/7327Y84G/Bonné - Exploring decision making with Android’s runtime p.pdf}
}

@inproceedings{borgesjr.DroidMate2PlatformAndroid2018,
  title = {{{DroidMate-2}}: A Platform for {{Android}} Test Generation},
  shorttitle = {{{DroidMate-2}}},
  booktitle = {Proceedings of the 33rd {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  author = {Borges Jr., Nataniel P. and Hotzkow, Jenny and Zeller, Andreas},
  date = {2018-09-03},
  pages = {916--919},
  publisher = {ACM},
  location = {Montpellier France},
  doi = {10.1145/3238147.3240479},
  url = {https://dl.acm.org/doi/10.1145/3238147.3240479},
  urldate = {2023-06-02},
  eventtitle = {{{ASE}} '18: 33rd {{ACM}}/{{IEEE International Conference}} on {{Automated Software Engineering}}},
  isbn = {978-1-4503-5937-5},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/TN3VEZ6F/Borges Jr. et al_2018_DroidMate-2.pdf}
}

@online{boseColumbusAndroidApp2023,
  title = {Columbus: {{Android App Testing Through Systematic Callback Exploration}}},
  shorttitle = {Columbus},
  author = {Bose, Priyanka and Das, Dipanjan and Vasan, Saastha and Mariani, Sebastiano and Grishchenko, Ilya and Continella, Andrea and Bianchi, Antonio and Kruegel, Christopher and Vigna, Giovanni},
  date = {2023-02-17},
  eprint = {2302.09116},
  eprinttype = {arXiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2302.09116},
  urldate = {2023-06-02},
  abstract = {With the continuous rise in the popularity of Android mobile devices, automated testing of apps has become more important than ever. Android apps are event-driven programs. Unfortunately, generating all possible types of events by interacting with an app’s interface is challenging for an automated testing approach. Callback-driven testing eliminates the need for event generation by directly invoking app callbacks. However, existing callback-driven testing techniques assume prior knowledge of Android callbacks, and they rely on a human expert, who is familiar with the Android API, to write stub code that prepares callback arguments before invocation. Since the Android API is very large and keeps evolving, prior techniques could only support a small fraction of callbacks present in the Android framework.},
  langid = {english},
  pubstate = {prepublished},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/CKDNJ8W4/Bose et al. - 2023 - Columbus Android App Testing Through Systematic C.pdf}
}

@online{boseSAILFISHVettingSmart2021,
  title = {{{SAILFISH}}: {{Vetting Smart Contract State-Inconsistency Bugs}} in {{Seconds}}},
  shorttitle = {{{SAILFISH}}},
  author = {Bose, Priyanka and Das, Dipanjan and Chen, Yanju and Feng, Yu and Kruegel, Christopher and Vigna, Giovanni},
  date = {2021-12-12},
  eprint = {2104.08638},
  eprinttype = {arXiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2104.08638},
  urldate = {2022-12-28},
  abstract = {This paper presents SAILFISH, a scalable system for automatically finding state-inconsistency bugs in smart contracts. To make the analysis tractable, we introduce a hybrid approach that includes (i) a light-weight exploration phase that dramatically reduces the number of instructions to analyze, and (ii) a precise refinement phase based on symbolic evaluation guided by our novel value-summary analysis, which generates extra constraints to over-approximate the side effects of whole-program execution, thereby ensuring the precision of the symbolic evaluation. We developed a prototype of SAILFISH and evaluated its ability to detect two state-inconsistency flaws, viz., reentrancy and transaction order dependence (TOD) in Ethereum smart contracts.},
  langid = {english},
  pubstate = {prepublished},
  file = {/Users/feymanpaper/Zotero/storage/2C96KBS2/Bose 等 - 2021 - SAILFISH Vetting Smart Contract State-Inconsisten.pdf}
}

@book{bryantComputerSystemsProgrammers2016,
  title = {Computer Systems: A Programmer's Perspective},
  shorttitle = {Computer Systems},
  author = {Bryant, Randal E. and O'Hallaron, David R.},
  date = {2016},
  edition = {Third edition},
  publisher = {Pearson},
  location = {Boston},
  isbn = {978-0-13-409266-9},
  langid = {english},
  pagetotal = {1084},
  keywords = {Computer systems,Computers,Telecommunication,User interfaces (Computer systems)},
  file = {/Users/feymanpaper/Zotero/storage/GNZ7XB3Q/Bryant 和 O'Hallaron - 2016 - Computer systems a programmer's perspective.pdf}
}

@inproceedings{caiDARPACombatingAsymmetric2023,
  title = {{{DARPA}}: {{Combating Asymmetric Dark UI Patterns}} on {{Android}} with {{Run-time View Decorator}}},
  shorttitle = {{{DARPA}}},
  booktitle = {2023 53rd {{Annual IEEE}}/{{IFIP International Conference}} on {{Dependable Systems}} and {{Networks}} ({{DSN}})},
  author = {Cai, Zhaoxin and Nan, Yuhong and Wang, Xueqiang and Long, Mengyi and Ou, Qihua and Yang, Min and Zheng, Zibin},
  date = {2023-06},
  pages = {480--493},
  publisher = {IEEE},
  location = {Porto, Portugal},
  doi = {10.1109/DSN58367.2023.00052},
  url = {https://ieeexplore.ieee.org/document/10202645/},
  urldate = {2024-05-14},
  abstract = {It has been extensively discussed that online services, such as shopping websites, may exploit dark user interface (UI) patterns to mislead users into performing unwanted and even harmful activities on the UI, e.g., subscribing to recurring purchases unknowingly. Most recently, the growing popularity of mobile platforms has led to an ever-extending reach of dark UI patterns in mobile apps, leading to security and privacy risks to end users. A systematic study of such patterns, including how to detect and mitigate them on mobile platforms, unfortunately, has not been conducted. In this paper, we fill the research gap by investigating the dark UI patterns in mobile apps. Specifically, we show the prevalence of the asymmetric dark UI patterns (AUI) in real-world apps, and reveal their risks by characterizing the AUI (e.g., subjects, hosts, and patterns). Then, through user studies, we demonstrate the demand for effective solutions to mitigate the potential risks of AUI. To meet the needs, we propose DARPA – an end-to-end and generic CV-based solution to identify AUIs at run-time and mitigate the risks by highlighting the AUIs with run-time UI decoration. Our evaluation shows that DARPA is highly accurate and introduces negligible overhead. Additionally, running DARPA does not require any modifications to the apps being analyzed and to the operating system.},
  eventtitle = {2023 53rd {{Annual IEEE}}/{{IFIP International Conference}} on {{Dependable Systems}} and {{Networks}} ({{DSN}})},
  isbn = {9798350347937},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/F2ZTRWWM/Cai et al. - 2023 - DARPA Combating Asymmetric Dark UI Patterns on An.pdf}
}

@inproceedings{caiFastbotMultiAgentModelBased2020,
  title = {Fastbot: {{A Multi-Agent Model-Based Test Generation System Beijing Bytedance Network Technology Co}}., {{Ltd}}.},
  shorttitle = {Fastbot},
  booktitle = {Proceedings of the {{IEEE}}/{{ACM}} 1st {{International Conference}} on {{Automation}} of {{Software Test}}},
  author = {Cai, Tianqin and Zhang, Zhao and Yang, Ping},
  year = {10 月 7, 2020},
  series = {{{AST}} '20},
  pages = {93--96},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3387903.3389308},
  url = {https://dl.acm.org/doi/10.1145/3387903.3389308},
  urldate = {2023-06-02},
  abstract = {Model-based test (MBT) generation techniques for automated GUI testing are of great value for app testing. Existing GUI model-based testing tools may fall into cyclic operations and run out of resources, when applied to apps with industrial complexity and scalability. In this work, we present a multi-agent GUI MBT system named Fastbot. Fastbot performs model construction on the server end. It applies multi-agent collaboration mechanism to speed up the model construction procedure. The proposed approach was applied on more than 20 applications from Bytedance with more than 1500 million monthly active users. Higher code coverage in less testing time is achieved with comparison of three other automated testing tools including Droidbot, Humanoid and Android Monkey.},
  isbn = {978-1-4503-7957-1},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/ZUAKP4PP/Cai et al_2020_Fastbot.pdf}
}

@article{caoLargeScaleStudy,
  title = {A {{Large Scale Study}} of {{User Behavior}}, {{Expectations}} and {{Engagement}} with {{Android Permissions}}},
  author = {Cao, Weicheng and Xia, Chunqiu and Peddinti, Sai Teja and Lie, David and Taft, Nina and Austin, Lisa M},
  abstract = {We conduct a global study on the behaviors, expectations and engagement of 1,719 participants across 10 countries and regions towards Android application permissions. Participants were recruited using mobile advertising and used an application we designed for 30 days. Our app samples user behaviors (decisions made), rationales (via in-situ surveys), expectations, and attitudes, as well as some app provided explanations. We study the grant and deny decisions our users make, and build mixed effect logistic regression models to illustrate the many factors that influence this decision making. Among several interesting findings, we observed that users facing an unexpected permission request are more than twice as likely to deny it compared to a user who expects it, and that permission requests accompanied by an explanation have a deny rate that is roughly half the deny rate of app permission requests without explanations. These findings remain true even when controlling for other factors. To the best of our knowledge, this may be the first study of actual privacy behavior (not stated behavior) for Android apps, with users using their own devices, across multiple continents.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/SB7K4C48/Cao et al. - A Large Scale Study of User Behavior, Expectations.pdf}
}

@inproceedings{chenAttentionYourCopied2024,
  title = {Attention! {{Your Copied Data}} Is {{Under Monitoring}}: {{A Systematic Study}} of {{Clipboard Usage}} in {{Android Apps}}},
  shorttitle = {Attention! {{Your Copied Data}} Is {{Under Monitoring}}},
  booktitle = {Proceedings of the 46th {{IEEE}}/{{ACM International Conference}} on {{Software Engineering}}},
  author = {Chen, Yongliang and Tang, Ruoqin and Zuo, Chaoshun and Zhang, Xiaokuan and Xue, Lei and Luo, Xiapu and Zhao, Qingchuan},
  date = {2024-02-06},
  pages = {1--13},
  publisher = {ACM},
  location = {Lisbon Portugal},
  doi = {10.1145/3597503.3623317},
  url = {https://dl.acm.org/doi/10.1145/3597503.3623317},
  urldate = {2024-05-14},
  eventtitle = {{{ICSE}} '24: 46th {{IEEE}}/{{ACM International Conference}} on {{Software Engineering}}},
  isbn = {9798400702174},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/VN7Q2DZ4/Chen et al_2024_Attention.pdf}
}

@article{chenExperimentalSecurityAnalysis,
  title = {Experimental {{Security Analysis}} of the {{App Model}} in {{Business Collaboration Platforms}}},
  author = {Chen, Yunang and Gao, Yue and Ceccio, Nick and Chatterjee, Rahul and Fawaz, Kassem and Fernandes, Earlence},
  abstract = {Business Collaboration Platforms like Microsoft Teams and Slack enable teamwork by supporting text chatting and third-party resource integration. A user can access online file storage, make video calls, and manage a code repository, all from within the platform, thus making them a hub for sensitive communication and resources. The key enabler for these productivity features is a third-party application model. We contribute an experimental security analysis of this model and the third-party apps. Performing this analysis is challenging because commercial platforms and their apps are closed-source systems. Our analysis methodology is to systematically investigate different types of interactions possible between apps and users. We discover that the access control model in these systems violates two fundamental security principles: least privilege and complete mediation. These violations enable a malicious app to exploit the confidentiality and integrity of user messages and third-party resources connected to the platform. We construct proof-of-concept attacks that can: (1) eavesdrop on user messages without having permission to read those messages; (2) launch fake video calls; (3) automatically merge code into repositories without user approval or involvement. Finally, we provide an analysis of countermeasures that systems like Slack and Microsoft Teams can adopt today.},
  langid = {english},
  keywords = {app_in_app},
  note = {1212kkksadassada00000},
  file = {/Users/feymanpaper/Zotero/storage/73U9DTUZ/Chen 等 - Experimental Security Analysis of the App Model in.pdf}
}

@article{chenFindingUnknownMalice,
  title = {Finding {{Unknown Malice}} in 10 {{Seconds}}: {{Mass Vetting}} for {{New Threats}} at the {{Google-Play Scale}}},
  author = {Chen, Kai and Wang, Peng and Lee, Yeonjoon and Wang, XiaoFeng and Zhang, Nan and Huang, Heqing and Zou, Wei and Liu, Peng},
  abstract = {An app market’s vetting process is expected to be scalable and effective. However, today’s vetting mechanisms are slow and less capable of catching new threats. In our research, we found that a more powerful solution can be found by exploiting the way Android malware is constructed and disseminated, which is typically through repackaging legitimate apps with similar malicious components. As a result, such attack payloads often stand out from those of the same repackaging origin and also show up in the apps not supposed to relate to each other.},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/2YWR4YL2/Chen et al. - Finding Unknown Malice in 10 Seconds Mass Vetting.pdf}
}

@article{chengWhenUserUser,
  title = {When the {{User Is Inside}} the {{User Interface}}: {{An Empirical Study}} of {{UI Security Properties}} in {{Augmented Reality}}},
  author = {Cheng, Kaiming and Bhattacharya, Arkaprabha and Lin, Michelle and Lee, Jaewook and Kumar, Aroosh and Tian, Jeffery F and Kohno, Tadayoshi and Roesner, Franziska},
  abstract = {Augmented reality (AR) experiences place users inside the user interface (UI), where they can see and interact with three-dimensional virtual content. This paper explores UI security for AR platforms, for which we identify three UI security-related properties: Same Space (how does the platform handle virtual content placed at the same coordinates?), Invisibility (how does the platform handle invisible virtual content?), and Synthetic Input (how does the platform handle simulated user input?). We demonstrate the security implications of different instantiations of these properties through five proof-of-concept attacks between distrusting AR application components (i.e., a main app and an included library) — including a clickjacking attack and an object erasure attack. We then empirically investigate these UI security properties on five current AR platforms: ARCore (Google), ARKit (Apple), Hololens (Microsoft), Oculus (Meta), and WebXR (browser). We find that all platforms enable at least three of our proofof-concept attacks to succeed. We discuss potential future defenses, including applying lessons from 2D UI security and identifying new directions for AR UI security.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/HGAGBE34/Cheng 等 - When the User Is Inside the User Interface An Emp.pdf}
}

@article{chenMetamorphicTestingNew,
  title = {Metamorphic {{Testing}}: {{A New Approach}} for {{Generating Next Test Cases}} y},
  author = {Chen, T Y},
  abstract = {In software testing, a set of test cases is constructed according to some prede ned selection criteria. The software is then examined against these test cases. Three interesting observations have been made on the current artifacts of software testing. Firstly, an error-revealing test case is considered useful while a successful test case which does not reveal software errors is usually not further investigated. Whether these successful test cases still contain useful information for revealing software errors has not been properly studied. Secondly, no matter how extensive the testing has been conducted in the development phase, errors may still exist in the software 5 . These errors, if left undetected, may eventually cause damage to the production system. The study of techniques for uncovering software errors in the production phase is seldom addressed in the literature. Thirdly, as indicated by Weyuker in 6 , the availability of test oracles is pragmatically unattainable in most situations. However, the availability of test oracles is generally assumed in conventional software testing techniques. In this paper, we propose a novel test case selection technique that derives new test cases from the successful ones. The selection aims at revealing software errors that are possibly left undetected in successful test cases which may be generated using some existing strategies. As such, the proposed technique augments the e ectiveness of existing test selection strategies. The yThis project was partially supported by a grant from the Australian Research Council and the Hong Kong Research Grant Council.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/UDEZJA6L/Chen - Metamorphic Testing A New Approach for Generating.pdf}
}

@inproceedings{chenUnveilingTricksAutomated2023,
  title = {Unveiling the {{Tricks}}: {{Automated Detection}} of {{Dark Patterns}} in {{Mobile Applications}}},
  shorttitle = {Unveiling the {{Tricks}}},
  booktitle = {Proceedings of the 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Chen, Jieshan and Sun, Jiamou and Feng, Sidong and Xing, Zhenchang and Lu, Qinghua and Xu, Xiwei and Chen, Chunyang},
  date = {2023-10-29},
  pages = {1--20},
  publisher = {ACM},
  location = {San Francisco CA USA},
  doi = {10.1145/3586183.3606783},
  url = {https://dl.acm.org/doi/10.1145/3586183.3606783},
  urldate = {2024-02-23},
  abstract = {Mobile apps bring us many conveniences, such as online shopping and communication, but some use malicious designs called dark patterns to trick users into doing things that are not in their best interest. Many works have been done to summarize the taxonomy of these patterns and some have tried to mitigate the problems through various techniques. However, these techniques are either time-consuming, not generalisable or limited to specifc patterns. To address these issues, we propose UIGuard, a knowledge-driven system that utilizes computer vision and natural language pattern matching to automatically detect a wide range of dark patterns in mobile UIs. Our system relieves the need for manually creating rules for each new UI/app and covers more types with superior performance. In detail, we integrated existing taxonomies into a consistent one, conducted a characteristic analysis and distilled knowledge from real-world examples and the taxonomy. Our UIGuard consists of two components, Property Extraction and Knowledge-Driven Dark Pattern Checker. We collected the frst dark pattern dataset, which contains 4,999 benign UIs and 1,353 malicious UIs of 1,660 instances spanning 1,023 mobile apps. Our system achieves a superior performance in detecting dark patterns (micro averages: 0.82 in precision, 0.77 in recall, 0.79 in F1 score). A user study involving 58 participants further showed that UIGuard signifcantly increases users’ knowledge of dark patterns. We demonstrated potential use cases of our work, which can beneft diferent stakeholders, and serve as a training tool for raising awareness of dark patterns.},
  eventtitle = {{{UIST}} '23: {{The}} 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {9798400701320},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/587VPEKK/Chen et al. - 2023 - Unveiling the Tricks Automated Detection of Dark .pdf}
}

@online{chenUnveilingTricksAutomated2023a,
  title = {Unveiling the {{Tricks}}: {{Automated Detection}} of {{Dark Patterns}} in {{Mobile Applications}}},
  shorttitle = {Unveiling the {{Tricks}}},
  author = {Chen, Jieshan and Sun, Jiamou and Feng, Sidong and Xing, Zhenchang and Lu, Qinghua and Xu, Xiwei and Chen, Chunyang},
  date = {2023-08-10},
  eprint = {2308.05898},
  eprinttype = {arXiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2308.05898},
  urldate = {2024-04-15},
  abstract = {Mobile apps bring us many conveniences, such as online shopping and communication, but some use malicious designs called dark patterns to trick users into doing things that are not in their best interest. Many works have been done to summarize the taxonomy of these patterns and some have tried to mitigate the problems through various techniques. However, these techniques are either time-consuming, not generalisable or limited to specific patterns. To address these issues, we propose UIGuard, a knowledge-driven system that utilizes computer vision and natural language pattern matching to automatically detect a wide range of dark patterns in mobile UIs. Our system relieves the need for manually creating rules for each new UI/app and covers more types with superior performance. In detail, we integrated existing taxonomies into a consistent one, conducted a characteristic analysis and distilled knowledge from real-world examples and the taxonomy. Our UIGuard consists of two components, Property Extraction and Knowledge-Driven Dark Pattern Checker. We collected the first dark pattern dataset, which contains 4,999 benign UIs and 1,353 malicious UIs of 1,660 instances spanning 1,023 mobile apps. Our system achieves a superior performance in detecting dark patterns (micro averages: 0.82 in precision, 0.77 in recall, 0.79 in F1 score). A user study involving 58 participants further shows that UIGuard significantly increases users’ knowledge of dark patterns.},
  langid = {english},
  pubstate = {prepublished},
  keywords = {Computer Science - Human-Computer Interaction},
  note = {Comment: 20 pages, 9 figures, accepted by UIST 2023},
  file = {/Users/feymanpaper/Zotero/storage/QMW8CKIA/Chen et al. - 2023 - Unveiling the Tricks Automated Detection of Dark .pdf}
}

@inproceedings{chenUnveilingTricksAutomated2023b,
  title = {Unveiling the {{Tricks}}: {{Automated Detection}} of {{Dark Patterns}} in {{Mobile Applications}}},
  shorttitle = {Unveiling the {{Tricks}}},
  booktitle = {Proceedings of the 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Chen, Jieshan and Sun, Jiamou and Feng, Sidong and Xing, Zhenchang and Lu, Qinghua and Xu, Xiwei and Chen, Chunyang},
  date = {2023-10-29},
  pages = {1--20},
  publisher = {ACM},
  location = {San Francisco CA USA},
  doi = {10.1145/3586183.3606783},
  url = {https://dl.acm.org/doi/10.1145/3586183.3606783},
  urldate = {2024-04-15},
  abstract = {Mobile apps bring us many conveniences, such as online shopping and communication, but some use malicious designs called dark patterns to trick users into doing things that are not in their best interest. Many works have been done to summarize the taxonomy of these patterns and some have tried to mitigate the problems through various techniques. However, these techniques are either time-consuming, not generalisable or limited to specifc patterns. To address these issues, we propose UIGuard, a knowledge-driven system that utilizes computer vision and natural language pattern matching to automatically detect a wide range of dark patterns in mobile UIs. Our system relieves the need for manually creating rules for each new UI/app and covers more types with superior performance. In detail, we integrated existing taxonomies into a consistent one, conducted a characteristic analysis and distilled knowledge from real-world examples and the taxonomy. Our UIGuard consists of two components, Property Extraction and Knowledge-Driven Dark Pattern Checker. We collected the frst dark pattern dataset, which contains 4,999 benign UIs and 1,353 malicious UIs of 1,660 instances spanning 1,023 mobile apps. Our system achieves a superior performance in detecting dark patterns (micro averages: 0.82 in precision, 0.77 in recall, 0.79 in F1 score). A user study involving 58 participants further showed that UIGuard signifcantly increases users’ knowledge of dark patterns. We demonstrated potential use cases of our work, which can beneft diferent stakeholders, and serve as a training tool for raising awareness of dark patterns.},
  eventtitle = {{{UIST}} '23: {{The}} 36th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  isbn = {9798400701320},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/W865BV3Y/Chen et al. - 2023 - Unveiling the Tricks Automated Detection of Dark .pdf}
}

@inproceedings{chinprutthiwongSecurityStudyService2020,
  title = {Security {{Study}} of {{Service Worker Cross-Site Scripting}}.},
  booktitle = {Annual {{Computer Security Applications Conference}}},
  author = {Chinprutthiwong, Phakpoom and Vardhan, Raj and Yang, GuangLiang and Gu, Guofei},
  date = {2020-12-07},
  pages = {643--654},
  publisher = {ACM},
  location = {Austin USA},
  doi = {10.1145/3427228.3427290},
  url = {https://dl.acm.org/doi/10.1145/3427228.3427290},
  urldate = {2023-02-21},
  abstract = {Nowadays, modern websites are utilizing service workers to provide users with app-like functionalities such as offline mode and push notifications. To handle such features, the service worker is equipped with special privileges including HTTP traffic manipulation. Thus, it is designed with security as a priority. However, we find that many websites introduce a questionable practice that can jeopardize the security of a service worker.},
  eventtitle = {{{ACSAC}} '20: {{Annual Computer Security Applications Conference}}},
  isbn = {978-1-4503-8858-0},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/3427228.3427290.pdf}
}

@inproceedings{chinprutthiwongServiceWorkerHiding2021,
  title = {The {{Service Worker Hiding}} in {{Your Browser}}: {{The Next Web Attack Target}}?},
  shorttitle = {The {{Service Worker Hiding}} in {{Your Browser}}},
  booktitle = {24th {{International Symposium}} on {{Research}} in {{Attacks}}, {{Intrusions}} and {{Defenses}}},
  author = {Chinprutthiwong, Phakpoom and Vardhan, Raj and Yang, GuangLiang and Zhang, Yangyong and Gu, Guofei},
  date = {2021-10-06},
  pages = {312--323},
  publisher = {ACM},
  location = {San Sebastian Spain},
  doi = {10.1145/3471621.3471845},
  url = {https://dl.acm.org/doi/10.1145/3471621.3471845},
  urldate = {2023-02-21},
  abstract = {In recent years, service workers are gaining attention from both web developers and attackers due to the unique features they provide. Recent findings have shown that an attacker can register a malicious service worker to take advantage of the victim such as by turning the victim’s device into a crypto-currency miner. However, the possibility of benign service workers being leveraged is not well studied.},
  eventtitle = {{{RAID}} '21: 24th {{International Symposium}} on {{Research}} in {{Attacks}}, {{Intrusions}} and {{Defenses}}},
  isbn = {978-1-4503-9058-3},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/3471621.3471845.pdf}
}

@article{deanMapReduceSimplifiedData2008,
  title = {{{MapReduce}}: Simplified Data Processing on Large Clusters},
  shorttitle = {{{MapReduce}}},
  author = {Dean, Jeffrey and Ghemawat, Sanjay},
  date = {2008-01},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {51},
  number = {1},
  pages = {107--113},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1327452.1327492},
  url = {https://dl.acm.org/doi/10.1145/1327452.1327492},
  urldate = {2024-05-08},
  abstract = {MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Many real world tasks are expressible in this model, as shown in the paper.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/B44BPS8C/Dean and Ghemawat - 2008 - MapReduce simplified data processing on large clu.pdf}
}

@article{dengNAUTILUSAutomatedRESTful,
  title = {{{NAUTILUS}}: {{Automated RESTful API Vulnerability Detection}}},
  author = {Deng, Gelei and Zhang, Zhiyi and Li, Yuekang and Liu, Yi and Zhang, Tianwei and Liu, Yang and Yu, Guo and Wang, Dongjin},
  abstract = {RESTful APIs have become arguably the most prevalent endpoint for accessing web services. Blackbox vulnerability scanners are a popular choice for detecting vulnerabilities in web services automatically. Unfortunately, they suffer from a number of limitations in RESTful API testing. Particularly, existing tools cannot effectively obtain the relations between API operations, and they lack the awareness of the correct sequence of API operations during testing. These drawbacks hinder the tools from requesting the API operations properly to detect potential vulnerabilities.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/NMAN45W2/Deng et al. - NAUTILUS Automated RESTful API Vulnerability Dete.pdf}
}

@article{DetectingStateInconsistency2023,
  title = {Detecting {{State Inconsistency Bugs}} in {{DApps}}  via {{On-Chain Transaction Replay}} and {{Fuzzing}}},
  date = {2023},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/ZJS8XEFK/2023 - Detecting State Inconsistency Bugs in DApps  via O.pdf}
}

@inproceedings{digeronimoUIDarkPatterns2020,
  title = {{{UI Dark Patterns}} and {{Where}} to {{Find Them}}: {{A Study}} on {{Mobile Applications}} and {{User Perception}}},
  shorttitle = {{{UI Dark Patterns}} and {{Where}} to {{Find Them}}},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Di Geronimo, Linda and Braz, Larissa and Fregnan, Enrico and Palomba, Fabio and Bacchelli, Alberto},
  date = {2020-04-21},
  pages = {1--14},
  publisher = {ACM},
  location = {Honolulu HI USA},
  doi = {10.1145/3313831.3376600},
  url = {https://dl.acm.org/doi/10.1145/3313831.3376600},
  urldate = {2024-04-15},
  abstract = {A Dark Pattern (DP) is an interface maliciously crafted to deceive users into performing actions they did not mean to do. In this work, we analyze Dark Patterns in 240 popular mobile apps and conduct an online experiment with 589 users on how they perceive Dark Patterns in such apps. The results of the analysis show that 95\% of the analyzed apps contain one or more forms of Dark Patterns and, on average, popular applications include at least seven different types of deceiving interfaces. The online experiment shows that most users do not recognize Dark Patterns, but can perform better in recognizing malicious designs if informed on the issue. We discuss the impact of our work and what measures could be applied to alleviate the issue.},
  eventtitle = {{{CHI}} '20: {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-4503-6708-0},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/9AXI8YMJ/Di Geronimo et al. - 2020 - UI Dark Patterns and Where to Find Them A Study o.pdf}
}

@inproceedings{dongTimetravelTestingAndroid2020,
  title = {Time-Travel {{Testing}} of {{Android Apps}}},
  booktitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Dong, Zhen and Böhme, Marcel and Cojocaru, Lucia and Roychoudhury, Abhik},
  date = {2020-10},
  pages = {481--492},
  issn = {1558-1225},
  abstract = {Android testing tools generate sequences of input events to exercise the state space of the app-under-test. Existing search-based techniques systematically evolve a population of event sequences so as to achieve certain objectives such as maximal code coverage. The hope is that the mutation of fit event sequences leads to the generation of even fitter sequences. However, the evolution of event sequences may be ineffective. Our key insight is that pertinent app states which contributed to the original sequence's fitness may not be reached by a mutated event sequence. The original path through the state space is truncated at the point of mutation. In this paper, we propose instead to evolve a population of states which can be captured upon discovery and resumed when needed. The hope is that generating events on a fit program state leads to the transition to even fitter states. For instance, we can quickly deprioritize testing the main screen state which is visited by most event sequences, and instead focus our limited resources on testing more interesting states that are otherwise difficult to reach. We call our approach time-travel testing because of this ability to travel back to any state that has been observed in the past. We implemented time-travel testing into TimeMachine, a time-travel enabled version of the successful, automated Android testing tool Monkey. In our experiments on a large number of open- and closed source Android apps, TimeMachine outperforms the state-of-the-art search-based/model-based Android testing tools Sapienz and Stoat, both in terms of coverage achieved and crashes found. We call our approach time-travel testing because of this ability to travel back to any state that has been observed in the past. We implemented time-travel testing into TimeMachine, a time-travel enabled version of the successful, automated Android testing tool Monkey. In our experiments on a large number of open- and closed source Android apps, TimeMachine outperforms the state-of-the-art search-based/model-based Android testing tools Sapienz and Stoat, both in terms of coverage achieved and crashes found.},
  eventtitle = {2020 {{IEEE}}/{{ACM}} 42nd {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  keywords = {Accidents,Android testing,Directed fuzzing,Sociology,Space exploration,State based,Statistics,Testing,Time travel testing,Tools,Virtualization},
  file = {/Users/feymanpaper/Zotero/storage/UGHF623N/9284058.html}
}

@inproceedings{dongTimetravelTestingAndroid2020a,
  title = {Time-Travel Testing of {{Android}} Apps},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 42nd {{International Conference}} on {{Software Engineering}}},
  author = {Dong, Zhen and Böhme, Marcel and Cojocaru, Lucia and Roychoudhury, Abhik},
  year = {10 月 1, 2020},
  series = {{{ICSE}} '20},
  pages = {481--492},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3377811.3380402},
  url = {https://dl.acm.org/doi/10.1145/3377811.3380402},
  urldate = {2023-06-01},
  abstract = {Android testing tools generate sequences of input events to exercise the state space of the app-under-test. Existing search-based techniques systematically evolve a population of event sequences so as to achieve certain objectives such as maximal code coverage. The hope is that the mutation of fit event sequences leads to the generation of even fitter sequences. However, the evolution of event sequences may be ineffective. Our key insight is that pertinent app states which contributed to the original sequence's fitness may not be reached by a mutated event sequence. The original path through the state space is truncated at the point of mutation. In this paper, we propose instead to evolve a population of states which can be captured upon discovery and resumed when needed. The hope is that generating events on a fit program state leads to the transition to even fitter states. For instance, we can quickly deprioritize testing the main screen state which is visited by most event sequences, and instead focus our limited resources on testing more interesting states that are otherwise difficult to reach. We call our approach time-travel testing because of this ability to travel back to any state that has been observed in the past. We implemented time-travel testing into TimeMachine, a time-travel enabled version of the successful, automated Android testing tool Monkey. In our experiments on a large number of open- and closed source Android apps, TimeMachine outperforms the state-of-the-art search-based/model-based Android testing tools Sapienz and Stoat, both in terms of coverage achieved and crashes found.},
  isbn = {978-1-4503-7121-6},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/DLHE7PAK/Dong et al_2020_Time-travel testing of Android apps.pdf}
}

@inproceedings{drakonakisPleaseForgetWhere2019,
  title = {Please {{Forget Where I Was Last Summer}}: {{The Privacy Risks}} of {{Public Location}} ({{Meta}}){{Data}}},
  shorttitle = {Please {{Forget Where I Was Last Summer}}},
  booktitle = {Proceedings 2019 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Drakonakis, Kostas and Ilia, Panagiotis and Ioannidis, Sotiris and Polakis, Jason},
  date = {2019},
  publisher = {Internet Society},
  location = {San Diego, CA},
  doi = {10.14722/ndss.2019.23151},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01A-6_Drakonakis_paper.pdf},
  urldate = {2022-12-27},
  abstract = {The exposure of location data constitutes a significant privacy risk to users as it can lead to de-anonymization, the inference of sensitive information, and even physical threats. In this paper we present LPAuditor, a tool that conducts a comprehensive evaluation of the privacy loss caused by public location metadata. First, we demonstrate how our system can pinpoint users’ key locations at an unprecedented granularity by identifying their actual postal addresses. Our evaluation on Twitter data highlights the effectiveness of our techniques which outperform prior approaches by 18.9\%-91.6\% for homes and 8.7\%-21.8\% for workplaces. Next we present a novel exploration of automated private information inference that uncovers “sensitive” locations that users have visited (pertaining to health, religion, and sex/nightlife). We find that location metadata can provide additional context to tweets and thus lead to the exposure of private information that might not match the users’ intentions.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-55-6},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/A2YTJUMN/Drakonakis 等 - 2019 - Please Forget Where I Was Last Summer The Privacy.pdf}
}

@inproceedings{fratantonioTriggerScopeDetectingLogic2016,
  title = {{{TriggerScope}}: {{Towards Detecting Logic Bombs}} in {{Android Applications}}},
  shorttitle = {{{TriggerScope}}},
  booktitle = {2016 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  author = {Fratantonio, Yanick and Bianchi, Antonio and Robertson, William and Kirda, Engin and Kruegel, Christopher and Vigna, Giovanni},
  date = {2016-05},
  pages = {377--396},
  issn = {2375-1207},
  doi = {10.1109/SP.2016.30},
  abstract = {Android is the most popular mobile platform today, and it is also the mobile operating system that is most heavily targeted by malware. Existing static analyses are effective in detecting the presence of most malicious code and unwanted information flows. However, certain types of malice are very difficult to capture explicitly by modeling permission sets, suspicious API calls, or unwanted information flows. One important type of such malice is malicious application logic, where a program (often subtly) modifies its outputs or performs actions that violate the expectations of the user. Malicious application logic is very hard to identify without a specification of the "normal," expected functionality of the application. We refer to malicious application logic that is executed, or triggered, only under certain (often narrow) circumstances as a logic bomb. This is a powerful mechanism that is commonly employed by targeted malware, often used as part of APTs and state-sponsored attacks: in fact, in this scenario, the malware is designed to target specific victims and to only activate under certain circumstances. In this paper, we make a first step towards detecting logic bombs. In particular, we propose trigger analysis, a new static analysis technique that seeks to automatically identify triggers in Android applications. Our analysis combines symbolic execution, path predicate reconstruction and minimization, and inter-procedural control-dependency analysis to enable the precise detection and characterization of triggers, and it overcomes several limitations of existing approaches. We implemented a prototype of our analysis, called TriggerScope, and we evaluated it over a large corpus of 9,582 benign apps from the Google Play Store and a set of trigger-based malware, including the recently-discovered HackingTeam's RCSAndroid advanced malware. Our system is capable of automatically identify several interesting time-, location-, and SMS-related triggers, is affected by a low false positive rate (0.38\%), and it achieves 100\% detection rate on the malware set. We also show how existing approaches, specifically when tasked to detect logic bombs, are affected by either a very high false positive rate or false negative rate. Finally, we discuss the logic bombs identified by our analysis, including two previously-unknown backdoors in benign apps.},
  eventtitle = {2016 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/HL4QJFDL/Fratantonio et al_2016_TriggerScope.pdf;/Users/feymanpaper/Zotero/storage/HEP29UUR/stamp.html}
}

@inproceedings{georgievBreakingFixingOriginBased2014,
  title = {Breaking and {{Fixing Origin-Based Access Control}} in {{Hybrid Web}}/{{Mobile Application Frameworks}}},
  booktitle = {Proceedings 2014 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Georgiev, Martin and Jana, Suman and Shmatikov, Vitaly},
  date = {2014},
  publisher = {Internet Society},
  location = {San Diego, CA},
  doi = {10.14722/ndss.2014.23323},
  url = {https://www.ndss-symposium.org/ndss2014/programme/breaking-and-fixing-origin-based-access-control-hybrid-webmobile-application-frameworks/},
  urldate = {2023-02-21},
  abstract = {Hybrid mobile applications (apps) combine the features of Web applications and “native” mobile apps. Like Web applications, they are implemented in portable, platformindependent languages such as HTML and JavaScript. Like native apps, they have direct access to local device resources—file system, location, camera, contacts, etc.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-35-8},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/shmat_ndss14nofrak.pdf}
}

@inproceedings{grayDarkPatternsLegal2021,
  title = {Dark {{Patterns}} and the {{Legal Requirements}} of {{Consent Banners}}: {{An Interaction Criticism Perspective}}},
  shorttitle = {Dark {{Patterns}} and the {{Legal Requirements}} of {{Consent Banners}}},
  booktitle = {Proceedings of the 2021 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Gray, Colin M. and Santos, Cristiana and Bielova, Nataliia and Toth, Michael and Clifford, Damian},
  date = {2021-05-06},
  pages = {1--18},
  publisher = {ACM},
  location = {Yokohama Japan},
  doi = {10.1145/3411764.3445779},
  url = {https://dl.acm.org/doi/10.1145/3411764.3445779},
  urldate = {2024-02-23},
  abstract = {User engagement with data privacy and security through consent banners has become a ubiquitous part of interacting with internet services. While previous work has addressed consent banners from either interaction design, legal, and ethics-focused perspectives, little research addresses the connections among multiple disciplinary approaches, including tensions and opportunities that transcend disciplinary boundaries. In this paper, we draw together perspectives and commentary from HCI, design, privacy and data protection, and legal research communities, using the language and strategies of “dark patterns” to perform an interaction criticism reading of three diferent types of consent banners. Our analysis builds upon designer, interface, user, and social context lenses to raise tensions and synergies that arise together in complex, contingent, and conficting ways in the act of designing consent banners. We conclude with opportunities for transdisciplinary dialogue across legal, ethical, computer science, and interactive systems scholarship to translate matters of ethical concern into public policy.},
  eventtitle = {{{CHI}} '21: {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  isbn = {978-1-4503-8096-6},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/267B9B5M/Gray et al. - 2021 - Dark Patterns and the Legal Requirements of Consen.pdf}
}

@article{gunawanComparativeStudyDark2021,
  title = {A {{Comparative Study}} of {{Dark Patterns Across Web}} and {{Mobile Modalities}}},
  author = {Gunawan, Johanna and Pradeep, Amogh and Choffnes, David and Hartzog, Woodrow and Wilson, Christo},
  date = {2021-10-18},
  journaltitle = {Proc. ACM Hum.-Comput. Interact.},
  volume = {5},
  pages = {377:1--377:29},
  doi = {10.1145/3479521},
  url = {https://dl.acm.org/doi/10.1145/3479521},
  urldate = {2025-02-15},
  abstract = {Dark patterns are user interface elements that can influence a person's behavior against their intentions or best interests. Prior work identified these patterns in websites and mobile apps, but little is known about how the design of platforms might impact dark pattern manifestations and related human vulnerabilities. In this paper, we conduct a comparative study of mobile application, mobile browser, and web browser versions of 105 popular services to investigate variations in dark patterns across modalities. We perform manual tests, identify dark patterns in each service, and examine how they persist or differ by modality. Our findings show that while services can employ some dark patterns equally across modalities, many dark patterns vary between platforms, and that these differences saddle people with inconsistent experiences of autonomy, privacy, and control. We conclude by discussing broader implications for policymakers and practitioners, and provide suggestions for furthering dark patterns research.},
  issue = {CSCW2},
  file = {/Users/feymanpaper/Zotero/storage/7QWYRJJL/Gunawan et al_2021_A Comparative Study of Dark Patterns Across Web and Mobile Modalities.pdf}
}

@inproceedings{guoExploringPotentialChatGPT2024,
  title = {Exploring the {{Potential}} of {{ChatGPT}} in {{Automated Code Refinement}}: {{An Empirical Study}}},
  shorttitle = {Exploring the {{Potential}} of {{ChatGPT}} in {{Automated Code Refinement}}},
  booktitle = {Proceedings of the 46th {{IEEE}}/{{ACM International Conference}} on {{Software Engineering}}},
  author = {Guo, Qi and Cao, Junming and Xie, Xiaofei and Liu, Shangqing and Li, Xiaohong and Chen, Bihuan and Peng, Xin},
  date = {2024-02-06},
  pages = {1--13},
  publisher = {ACM},
  location = {Lisbon Portugal},
  doi = {10.1145/3597503.3623306},
  url = {https://dl.acm.org/doi/10.1145/3597503.3623306},
  urldate = {2024-05-14},
  eventtitle = {{{ICSE}} '24: 46th {{IEEE}}/{{ACM International Conference}} on {{Software Engineering}}},
  isbn = {9798400702174},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/F2TGBU69/Guo et al_2024_Exploring the Potential of ChatGPT in Automated Code Refinement.pdf}
}

@inproceedings{guoImprovingAutomatedGUI2020,
  title = {Improving {{Automated GUI Exploration}} of {{Android Apps}} via {{Static Dependency Analysis}}},
  booktitle = {2020 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  author = {Guo, Wunan and Shen, Liwei and Su, Ting and Peng, Xin and Xie, Weiyang},
  date = {2020-09},
  pages = {557--568},
  issn = {2576-3148},
  doi = {10.1109/ICSME46990.2020.00059},
  abstract = {Exploring GUIs of Android apps plays a key role in many important scenarios such as functional testing (e.g., finding crash errors), security analysis (e.g., identifying malicious behav-iors) and competitive analysis (e.g., storyboarding app features). To automate GUI exploration, existing techniques often try to visit as many GUI pages as possible via specific strategies, e.g., random (like Monkey) or heuristic (like Stoat, A3E). However, their effectiveness is still unclear and much under-explored. To this end, we conducted the first study in this paper to understand and characterize their limitations by carefully analyzing the coverage reports from a set of real-world, open-source apps. Through this study, we identified three key limitations due to the lack of dependency knowledge during exploration, i.e., widget-page dependency, widget-widget dependency and system-event dependency. To overcome them, we introduce dependency-informed exploration, an automated approach that leverages static dependency analysis to effectively improve GUI exploration performance. Given an app, our approach first constructs a GUI page transition model that captures the dependencies between GUI widgets, and then guides GUI exploration during a depth-first traversal. We realized our approach as a tool named Gesda, and evaluated it on 70 open-source Android apps. The results show Gesda outperforms existing state-of-the-art GUI exploration techniques, i.e., Monkey and Stoat. Additionally, Gesda uncovers 4 previously unknown crashes in 4 apps as a by-product of GUI exploration due to the benefit of dependency knowledge, while Monkey and Stoat have not discovered them.},
  eventtitle = {2020 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/LVHRHTAT/Guo et al_2020_Improving Automated GUI Exploration of Android Apps via Static Dependency.pdf;/Users/feymanpaper/Zotero/storage/BNZEXSAP/9240615.html}
}

@inproceedings{guPracticalGUITesting2019,
  title = {Practical {{GUI Testing}} of {{Android Applications Via Model Abstraction}} and {{Refinement}}},
  booktitle = {2019 {{IEEE}}/{{ACM}} 41st {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Gu, Tianxiao and Sun, Chengnian and Ma, Xiaoxing and Cao, Chun and Xu, Chang and Yao, Yuan and Zhang, Qirun and Lu, Jian and Su, Zhendong},
  date = {2019-05},
  pages = {269--280},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2019.00042},
  abstract = {This paper introduces a new, fully automated modelbased approach for effective testing of Android apps. Different from existing model-based approaches that guide testing with a static GUI model (i.e., the model does not evolve its abstraction during testing, and is thus often imprecise), our approach dynamically optimizes the model by leveraging the runtime information during testing. This capability of model evolution significantly improves model precision, and thus dramatically enhances the testing effectiveness compared to existing approaches, which our evaluation confirms.We have realized our technique in a practical tool, APE. On 15 large, widely-used apps from the Google Play Store, APE outperforms the state-of-the-art Android GUI testing tools in terms of both testing coverage and the number of detected unique crashes. To further demonstrate APE's effectiveness and usability, we conduct another evaluation of APE on 1,316 popular apps, where it found 537 unique crashes. Out of the 38 reported crashes, 13 have been fixed and 5 have been confirmed.},
  eventtitle = {2019 {{IEEE}}/{{ACM}} 41st {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/Z7QAUBEE/Gu et al_2019_Practical GUI Testing of Android Applications Via Model Abstraction and.pdf;/Users/feymanpaper/Zotero/storage/UXL57IA7/stamp.html}
}

@inproceedings{haoPUMAProgrammableUIautomation2014,
  title = {{{PUMA}}: Programmable {{UI-automation}} for Large-Scale Dynamic Analysis of Mobile Apps},
  shorttitle = {{{PUMA}}},
  booktitle = {Proceedings of the 12th Annual International Conference on {{Mobile}} Systems, Applications, and Services},
  author = {Hao, Shuai and Liu, Bin and Nath, Suman and Halfond, William G.J. and Govindan, Ramesh},
  year = {6 月 2, 2014},
  series = {{{MobiSys}} '14},
  pages = {204--217},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2594368.2594390},
  url = {https://dl.acm.org/doi/10.1145/2594368.2594390},
  urldate = {2023-06-03},
  abstract = {Mobile app ecosystems have experienced tremendous growth in the last six years. This has triggered research on dynamic analysis of performance, security, and correctness properties of the mobile apps in the ecosystem. Exploration of app execution using automated UI actions has emerged as an important tool for this research. However, existing research has largely developed analysis-specific UI automation techniques, wherein the logic for exploring app execution is intertwined with the logic for analyzing app properties. PUMA is a programmable framework that separates these two concerns. It contains a generic UI automation capability (often called a Monkey) that exposes high-level events for which users can define handlers. These handlers can flexibly direct the Monkey's exploration, and also specify app instrumentation for collecting dynamic state information or for triggering changes in the environment during app execution. Targeted towards operators of app marketplaces, PUMA incorporates mechanisms for scaling dynamic analysis to thousands of apps. We demonstrate the capabilities of PUMA by analyzing seven distinct performance, security, and correctness properties for 3,600 apps downloaded from the Google Play store.},
  isbn = {978-1-4503-2793-0},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/GH5AAEKS/Hao et al_2014_PUMA.pdf}
}

@article{hellersteinArchitectureDatabaseSystem2007,
  title = {Architecture of a {{Database System}}},
  author = {Hellerstein, Joseph M. and Stonebraker, Michael and Hamilton, James},
  date = {2007},
  journaltitle = {Foundations and Trends® in Databases},
  shortjournal = {FNT in Databases},
  volume = {1},
  number = {2},
  pages = {141--259},
  issn = {1931-7883, 1931-7891},
  doi = {10.1561/1900000002},
  url = {http://www.nowpublishers.com/article/Details/DBS-002},
  urldate = {2024-12-11},
  abstract = {Database Management Systems (DBMSs) are a ubiquitous and critical component of modern computing, and the result of decades of research and development in both academia and industry. Historically, DBMSs were among the earliest multi-user server systems to be developed, and thus pioneered many systems design techniques for scalability and reliability now in use in many other contexts. While many of the algorithms and abstractions used by a DBMS are textbook material, there has been relatively sparse coverage in the literature of the systems design issues that make a DBMS work. This paper presents an architectural discussion of DBMS design principles, including process models, parallel architecture, storage system design, transaction system implementation, query processor and optimizer architectures, and typical shared components and utilities. Successful commercial and open-source systems are used as points of reference, particularly when multiple alternative designs have been adopted by different groups.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/YC9EH7I7/Hellerstein 等 - 2007 - Architecture of a Database System.pdf}
}

@inproceedings{hellmanCharacterizingUserBehaviors2022,
  title = {Characterizing User Behaviors in Open-Source Software User Forums: An Empirical Study},
  shorttitle = {Characterizing User Behaviors in Open-Source Software User Forums},
  booktitle = {Proceedings of the 15th {{International Conference}} on {{Cooperative}} and {{Human Aspects}} of {{Software Engineering}}},
  author = {Hellman, Jazlyn and Chen, Jiahao and Uddin, Md. Sami and Cheng, Jinghui and Guo, Jin L. C.},
  date = {2022-05-21},
  pages = {46--55},
  publisher = {ACM},
  location = {Pittsburgh Pennsylvania},
  doi = {10.1145/3528579.3529178},
  url = {https://dl.acm.org/doi/10.1145/3528579.3529178},
  urldate = {2024-05-14},
  eventtitle = {{{ICSE}} '22: 44th {{International Conference}} on {{Software Engineering}}},
  isbn = {978-1-4503-9342-3},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/7HALI8R5/Hellman et al_2022_Characterizing user behaviors in open-source software user forums.pdf}
}

@article{huangSUPORPreciseScalable,
  title = {{{SUPOR}}: {{Precise}} and {{Scalable Sensitive User Input Detection}}  for {{Android Apps}}},
  author = {Huang, Jianjun and Li, Zhichun and Xiao, Xusheng and Wu, Zhenyu and Lu, Kangjie and Zhang, Xiangyu and Jiang, Guofei},
  abstract = {While smartphones and mobile apps have been an essential part of our lives, privacy is a serious concern. Previous mobile privacy related research efforts have largely focused on predefined known sources managed by smartphones. Sensitive user inputs through UI (User Interface), another information source that may contain a lot of sensitive information, have been mostly neglected.},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/A6ZVUV3Y/Huang et al. - SUPOR Precise and Scalable Sensitive User Input D.pdf}
}

@article{huntZooKeeperWaitfreeCoordination,
  title = {{{ZooKeeper}}: {{Wait-free}} Coordination for {{Internet-scale}} Systems},
  author = {Hunt, Patrick and Konar, Mahadev and Junqueira, Flavio P and Reed, Benjamin},
  abstract = {In this paper, we describe ZooKeeper, a service for coordinating processes of distributed applications. Since ZooKeeper is part of critical infrastructure, ZooKeeper aims to provide a simple and high performance kernel for building more complex coordination primitives at the client. It incorporates elements from group messaging, shared registers, and distributed lock services in a replicated, centralized service. The interface exposed by ZooKeeper has the wait-free aspects of shared registers with an event-driven mechanism similar to cache invalidations of distributed file systems to provide a simple, yet powerful coordination service.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/5UMUCXJQ/Hunt et al. - ZooKeeper Wait-free coordination for Internet-sca.pdf}
}

@inproceedings{huOTestWebViewOrientedTesting2023,
  title = {{{ωTest}}: {{WebView-Oriented Testing}} for {{Android Applications}}},
  shorttitle = {{{ωTest}}},
  booktitle = {Proceedings of the 32nd {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Hu, Jiajun and Wei, Lili and Liu, Yepang and Cheung, Shing-Chi},
  year = {7 月 13, 2023},
  series = {{{ISSTA}} 2023},
  pages = {992--1004},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3597926.3598112},
  url = {https://dl.acm.org/doi/10.1145/3597926.3598112},
  urldate = {2023-09-19},
  abstract = {WebView is a UI widget that helps integrate web applications into the native context of Android apps. It provides powerful mechanisms for bi-directional interactions between the native-end (Java) and the web-end (JavaScript) of an Android app. However, these interaction mechanisms are complicated and have induced various types of bugs. To mitigate the problem, various techniques have been proposed to detect WebView-induced bugs via dynamic analysis, which heavily relies on executing tests to explore WebView behaviors. Unfortunately, these techniques either require manual effort or adopt random test generation approaches, which are not able to effectively explore diverse WebView behaviors. In this paper, we study the problem of test generation for WebViews in Android apps. Effective test generation for WebViews requires identifying the essential program properties to be covered by the generated tests. To this end, we propose WebView-specific properties to characterize WebView behaviors, and devise a cross-language dynamic analysis method to identify these properties. We develop ωTest, a test generation technique that searches for event sequences covering the identified WebView-specific properties. An evaluation on 74 real-world open-/closed-source Android apps shows that ωTest can cover diverse WebView behaviors and detect WebView-induced bugs effectively. ωTest detected 36 previously-unknown bugs. From the 22 bugs that we have reported to the app developers, 13 bugs were confirmed, 9 of which were fixed.},
  isbn = {9798400702211},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/5WSE5RB5/Hu et al. - 2023 - ωTest WebView-Oriented Testing for Android Applic.pdf}
}

@inproceedings{iannilloChizpurfleGrayBoxAndroid2017,
  title = {Chizpurfle: {{A Gray-Box Android Fuzzer}} for {{Vendor Service Customizations}}},
  shorttitle = {Chizpurfle},
  booktitle = {2017 {{IEEE}} 28th {{International Symposium}} on {{Software Reliability Engineering}} ({{ISSRE}})},
  author = {Iannillo, Antonio Ken and Natella, Roberto and Cotroneo, Domenico and Nita-Rotaru, Cristina},
  date = {2017-10},
  pages = {1--11},
  publisher = {IEEE},
  location = {Toulouse},
  doi = {10.1109/ISSRE.2017.16},
  url = {http://ieeexplore.ieee.org/document/8109068/},
  urldate = {2023-02-04},
  abstract = {Android has become the most popular mobile OS, as it enables device manufacturers to introduce customizations to compete with value-added services. However, customizations make the OS less dependable and secure, since they can introduce software flaws. Such flaws can be found by using fuzzing, a popular testing technique among security researchers.},
  eventtitle = {2017 {{IEEE}} 28th {{International Symposium}} on {{Software Reliability Engineering}} ({{ISSRE}})},
  isbn = {978-1-5386-0941-5},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/PCTB225S/Iannillo 等 - 2017 - Chizpurfle A Gray-Box Android Fuzzer for Vendor S.pdf}
}

@article{jangPosterKerberoidPractical2019,
  title = {Poster: {{Kerberoid}}: {{A Practical Android App Decompilation System}} with {{Multiple Decompilers}}},
  author = {Jang, Heejun and Jin, Beomjin and Hyun, Sangwon and Kim, Hyoungshick},
  date = {2019},
  abstract = {Decompilation is frequently used to analyze binary programs. In Android, however, decompilers all perform differently with varying apps due to their own characteristics. Obviously, there is no universal solution in all conditions. Based on this observation, we present a practical Android app decompilation system (called Kerberoid) that automatically stitches the results from multiple decompilers together to maximize the coverage and the accuracy of decompiled codes. We evaluate the performance of Kerberoid with 151 Android apps in which their corresponding source codes are publicly available. Kerberoid fully recovered all functions for 17\% of the apps tested and gained a similarity score over 50\% for 40\% of the apps tested, increased by 7\% and 9\%, respectively, compared with the best existing decompiler.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/8CXSHULQ/Jang 等 - 2019 - Poster Kerberoid A Practical Android App Decompi.pdf}
}

@online{kanProtectingUserPrivacy2023,
  title = {Protecting {{User Privacy}} in {{Remote Conversational Systems}}: {{A Privacy-Preserving}} Framework Based on Text Sanitization},
  shorttitle = {Protecting {{User Privacy}} in {{Remote Conversational Systems}}},
  author = {Kan, Zhigang and Qiao, Linbo and Yu, Hao and Peng, Liwen and Gao, Yifu and Li, Dongsheng},
  date = {2023-06-14},
  eprint = {2306.08223},
  eprinttype = {arXiv},
  url = {http://arxiv.org/abs/2306.08223},
  urldate = {2024-10-16},
  abstract = {Large Language Models (LLMs) are gaining increasing attention due to their exceptional performance across numerous tasks. As a result, the general public utilize them as an influential tool for boosting their productivity while natural language processing researchers endeavor to employ them in solving existing or new research problems. Unfortunately, individuals can only access such powerful AIs through APIs, which ultimately leads to the transmission of raw data to the models' providers and increases the possibility of privacy data leakage. Current privacy-preserving methods for cloud-deployed language models aim to protect privacy information in the pre-training dataset or during the model training phase. However, they do not meet the specific challenges presented by the remote access approach of new large-scale language models. This paper introduces a novel task, "User Privacy Protection for Dialogue Models," which aims to safeguard sensitive user information from any possible disclosure while conversing with chatbots. We also present an evaluation scheme for this task, which covers evaluation metrics for privacy protection, data availability, and resistance to simulation attacks. Moreover, we propose the first framework for this task, namely privacy protection through text sanitization. Before sending the input to remote large models, it filters out the sensitive information, using several rounds of text sanitization based on privacy types that users define. Upon receiving responses from the larger model, our framework automatically restores privacy to ensure that the conversation goes smoothly, without intervention from the privacy filter. Experiments based on real-world datasets demonstrate the efficacy of our privacy-preserving approach against eavesdropping from potential attackers.},
  pubstate = {prepublished},
  keywords = {Computer Science - Cryptography and Security,Computer Science - Human-Computer Interaction},
  file = {/Users/feymanpaper/Zotero/storage/C8V75AJC/Kan et al_2023_Protecting User Privacy in Remote Conversational Systems.pdf;/Users/feymanpaper/Zotero/storage/WNWWPAJ4/2306.html}
}

@article{kleppmannDesigningDataIntensiveApplications,
  title = {Designing {{Data-Intensive Applications}}},
  author = {Kleppmann, Martin},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/FYCMXCMX/Kleppmann - Designing Data-Intensive Applications.pdf}
}

@article{kochOKNotEnough,
  title = {The {{OK Is Not Enough}}: {{A Large Scale Study}} of {{Consent Dialogs}} in {{Smartphone Applications}}},
  author = {Koch, Simon and Altpeter, Benjamin and Johns, Martin},
  abstract = {Mobile applications leaking personal information is a well established observation pre and post GDPR. The legal requirements for personal data collection in the context of tracking are specified by GDPR and the common understanding is, that tracking must be based on proper consent. Studies of the consent dialogs on websites revealed severe issues including dark patterns. However, the mobile space is currently underexplored with initial observations pointing towards a similar state of affairs. To address this research gap we analyze a subset of possible consent dialogs, namely privacy consent dialogs, in 3006 Android and 1773 iOS applications. We show that 22.3\% of all apps have any form of dialog with only 11.9\% giving the user some form of actionable choice, e.g., at least an accept button. However, this choice is limited as a large proportion of all such dialogs employ some form of dark pattern coercing the user to consent.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/4H7EB728/Koch et al. - The OK Is Not Enough A Large Scale Study of Conse.pdf}
}

@inproceedings{kollnigWantMyApp2021,
  title = {I {{Want My App That Way}}: {{Reclaiming Sovereignty Over Personal Devices}}},
  shorttitle = {I {{Want My App That Way}}},
  booktitle = {Extended {{Abstracts}} of the 2021 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Kollnig, Konrad and Datta, Siddhartha and Van Kleek, Max},
  date = {2021-05-08},
  series = {{{CHI EA}} '21},
  pages = {1--8},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3411763.3451632},
  url = {https://dl.acm.org/doi/10.1145/3411763.3451632},
  urldate = {2025-02-15},
  abstract = {Dark patterns in mobile apps take advantage of cognitive biases of end-users and can have detrimental effects on people’s lives. Despite growing research in identifying remedies for dark patterns and established solutions for desktop browsers, there exists no established methodology to reduce dark patterns in mobile apps. Our work introduces GreaseDroid, a community-driven app modification framework enabling non-expert users to disable dark patterns in apps selectively.},
  isbn = {978-1-4503-8095-9},
  file = {/Users/feymanpaper/Zotero/storage/2DUJEPQ2/Kollnig et al_2021_I Want My App That Way.pdf}
}

@inproceedings{laiGoalDrivenExplorationAndroid2019,
  title = {Goal-{{Driven Exploration}} for {{Android Applications}}},
  booktitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  author = {Lai, Duling and Rubin, Julia},
  date = {2019-11},
  pages = {115--127},
  publisher = {IEEE},
  location = {San Diego, CA, USA},
  doi = {10.1109/ASE.2019.00021},
  url = {https://ieeexplore.ieee.org/document/8952363/},
  urldate = {2023-06-04},
  abstract = {This paper proposes a solution for automated goaldriven exploration of Android applications – a scenario in which a user, e.g., a security auditor, needs to dynamically trigger the functionality of interest in an application, e.g., to check whether user-sensitive info is only sent to recognized third-party servers. As the auditor might need to check hundreds or even thousands of apps, manually exploring each app to trigger the desired behavior is too time-consuming to be feasible. Existing automated application exploration and testing techniques are of limited help in this scenario as well, as their goal is mostly to identify faults by systematically exploring different app paths, rather than swiftly navigating to the target functionality.},
  eventtitle = {2019 34th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  isbn = {978-1-72812-508-4},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/XRVVIWSR/Lai and Rubin - 2019 - Goal-Driven Exploration for Android Applications.pdf}
}

@inproceedings{leiInsecuritySMSOneTime2021,
  title = {On the {{Insecurity}} of {{SMS One-Time Password Messages}} against {{Local Attackers}} in {{Modern Mobile Devices}}},
  booktitle = {Proceedings 2021 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Lei, Zeyu and Nan, Yuhong and Fratantonio, Yanick and Bianchi, Antonio},
  date = {2021},
  publisher = {Internet Society},
  location = {Virtual},
  doi = {10.14722/ndss.2021.24212},
  url = {https://www.ndss-symposium.org/wp-content/uploads/ndss2021_3B-4_24212_paper.pdf},
  urldate = {2022-12-27},
  abstract = {SMS messages containing One-Time Passwords (OTPs) are a widely used mechanism for performing authentication in mobile applications. In fact, many popular apps use OTPs received via SMS as the only authentication factor, entirely replacing password-based authentication schemes. Although SMS OTP authentication mechanisms provide significant convenience to end-users, they also have significant security implications. In this paper, we study these mobile apps’ authentication schemes based on SMS OTPs, and, in particular, we perform a systematic study on the threats posed by “local attacks,” a scenario in which an attacker has control over an unprivileged third-party app on the victim’s device. This study was carried out using a combination of reverse engineering, formal verification, user studies, and large-scale automated analysis. Our work not only revealed vulnerabilities in third-party apps, but it also uncovered several new design and implementation flaws in core APIs implemented by the mobile operating systems themselves. For instance, we found two official Android APIs to be vulnerable by design, i.e., APIs that inevitably lead to the implementation of insecure authentication schemes, even when used according to their documentation. Moreover, we found that other APIs are prone to be used unsafely by apps’ developers.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-66-2},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/M54GMTNQ/Lei 等 - 2021 - On the Insecurity of SMS One-Time Password Message.pdf}
}

@inproceedings{liCollectResponsiblyDeliver2022,
  title = {Collect {{Responsibly But Deliver Arbitrarily}}?: {{A Study}} on {{Cross-User Privacy Leakage}} in {{Mobile Apps}}},
  shorttitle = {Collect {{Responsibly But Deliver Arbitrarily}}?},
  booktitle = {Proceedings of the 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Li, Shuai and Yang, Zhemin and Hua, Nan and Liu, Peng and Zhang, Xiaohan and Yang, Guangliang and Yang, Min},
  date = {2022-11-07},
  pages = {1887--1900},
  publisher = {ACM},
  location = {Los Angeles CA USA},
  doi = {10.1145/3548606.3559371},
  url = {https://dl.acm.org/doi/10.1145/3548606.3559371},
  urldate = {2023-02-21},
  eventtitle = {{{CCS}} '22: 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-9450-5},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/3548606.3559371.pdf}
}

@online{liuChattingGPT3ZeroShot2023,
  title = {Chatting with {{GPT-3}} for {{Zero-Shot Human-Like Mobile Automated GUI Testing}}},
  author = {Liu, Zhe and Chen, Chunyang and Wang, Junjie and Chen, Mengzhuo and Wu, Boyu and Che, Xing and Wang, Dandan and Wang, Qing},
  date = {2023-05-16},
  eprint = {2305.09434},
  eprinttype = {arXiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2305.09434},
  urldate = {2023-05-22},
  abstract = {Mobile apps are indispensable for people's daily life, and automated GUI (Graphical User Interface) testing is widely used for app quality assurance. There is a growing interest in using learning-based techniques for automated GUI testing which aims at generating human-like actions and interactions. However, the limitations such as low testing coverage, weak generalization, and heavy reliance on training data, make an urgent need for a more effective approach to generate human-like actions to thoroughly test mobile apps. Inspired by the success of the Large Language Model (LLM), e.g., GPT-3 and ChatGPT, in natural language understanding and question answering, we formulate the mobile GUI testing problem as a Q\&A task. We propose GPTDroid, asking LLM to chat with the mobile apps by passing the GUI page information to LLM to elicit testing scripts, and executing them to keep passing the app feedback to LLM, iterating the whole process. Within it, we extract the static context of the GUI page and the dynamic context of the iterative testing process, design prompts for inputting this information to LLM, and develop a neural matching network to decode the LLM's output into actionable steps to execute the app. We evaluate GPTDroid on 86 apps from Google Play, and its activity coverage is 71\%, with 32\% higher than the best baseline, and can detect 36\% more bugs with faster speed than the best baseline. GPTDroid also detects 48 new bugs on the Google Play with 25 of them being confirmed/fixed. We further summarize the capabilities of GPTDroid behind the superior performance, including semantic text input, compound action, long meaningful test trace, and test case prioritization.},
  pubstate = {prepublished},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/J2YVPAHM/Liu et al_2023_Chatting with GPT-3 for Zero-Shot Human-Like Mobile Automated GUI Testing.pdf;/Users/feymanpaper/Zotero/storage/WEQ59K7I/2305.html}
}

@inproceedings{liUnleashingWalkingDead2017,
  title = {Unleashing the {{Walking Dead}}: {{Understanding Cross-App Remote Infections}} on {{Mobile WebViews}}},
  shorttitle = {Unleashing the {{Walking Dead}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Li, Tongxin and Wang, Xueqiang and Zha, Mingming and Chen, Kai and Wang, XiaoFeng and Xing, Luyi and Bai, Xiaolong and Zhang, Nan and Han, Xinhui},
  date = {2017-10-30},
  pages = {829--844},
  publisher = {ACM},
  location = {Dallas Texas USA},
  doi = {10.1145/3133956.3134021},
  url = {https://dl.acm.org/doi/10.1145/3133956.3134021},
  urldate = {2022-12-27},
  abstract = {As a critical feature for enhancing user experience, cross-app URL invocation has been reported to cause unauthorized execution of app components. Although protection has already been put in place, little has been done to understand the security risks of navigating an app’s WebView through an URL, a legitimate need for displaying the app’s UI during cross-app interactions. In our research, we found that the current design of such cross-WebView navigation actually opens the door to a cross-app remote infection, allowing a remote adversary to spread malicious web content across different apps’ WebView instances and acquire stealthy and persistent control of these apps. This new threat, dubbed Cross-App WebView Infection (XAWI), enables a series of multi-app, colluding attacks never thought before, with significant real world impacts. Particularly, we found that the remote adversary can collectively utilize multiple infected apps’ individual capabilities to escalate his privileges on a mobile device or orchestrate a highly realistic remote Phishing attack (e.g., running a malicious script in Chrome to stealthily change Twitter’s WebView to fake Twitter’s own login UI). We show that the adversary can easily find such attack “building blocks” (popular apps whose WebViews can be redirected by another app) through an automatic fuzz, and discovered about 7.4\% of the most popular apps subject to the XAWI attacks, including Facebook, Twitter, Amazon and others. Our study reveals the contention between the demand for convenient cross-WebView communication and the need for security control on the channel, and makes the first step toward building OS-level protection to safeguard this fast-growing technology.},
  eventtitle = {{{CCS}} '17: 2017 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-4946-8},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/KA8CXZMY/Li 等 - 2017 - Unleashing the Walking Dead Understanding Cross-A.pdf}
}

@inproceedings{liuProMalPreciseWindow2022,
  title = {{{ProMal}}: Precise Window Transition Graphs for Android via Synergy of Program Analysis and Machine Learning},
  shorttitle = {{{ProMal}}},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Liu, Changlin and Wang, Hanlin and Liu, Tianming and Gu, Diandian and Ma, Yun and Wang, Haoyu and Xiao, Xusheng},
  date = {2022-05-21},
  pages = {1755--1767},
  publisher = {ACM},
  location = {Pittsburgh Pennsylvania},
  doi = {10.1145/3510003.3510037},
  url = {https://dl.acm.org/doi/10.1145/3510003.3510037},
  urldate = {2023-05-12},
  abstract = {Mobile apps have been an integral part in our daily life. As these apps become more complex, it is critical to provide automated analysis techniques to ensure the correctness, security, and performance of these apps. A key component for these automated analysis techniques is to create a graphical user interface (GUI) model of an app, i.e., a window transition graph (WTG), that models windows and transitions among the windows. While existing work has provided both static and dynamic analysis to build the WTG for an app, the constructed WTG misses many transitions or contains many infeasible transitions due to the coverage issues of dynamic analysis and over-approximation of the static analysis. We propose ProMal, a “tribrid” analysis that synergistically combines static analysis, dynamic analysis, and machine learning to construct a precise WTG. Specifically, ProMal first applies static analysis to build a static WTG, and then applies dynamic analysis to verify the transitions in the static WTG. For the unverified transitions, ProMal further provides machine learning techniques that leverage runtime information (i.e., screenshots, UI layouts, and text information) to predict whether they are feasible transitions. Our evaluations on 40 real-world apps demonstrate the superiority of ProMal in building WTGs over static analysis, dynamic analysis, and machine learning techniques when they are applied separately.},
  eventtitle = {{{ICSE}} '22: 44th {{International Conference}} on {{Software Engineering}}},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/AC4T73SU/Liu et al. - 2022 - ProMal precise window transition graphs for andro.pdf}
}

@inproceedings{longUnderstandingDarkUI2023a,
  title = {Understanding {{Dark UI Patterns}} in the {{Mobile Ecosystem}}: {{A Case Study}} of {{Apps}} in {{China}}},
  shorttitle = {Understanding {{Dark UI Patterns}} in the {{Mobile Ecosystem}}},
  booktitle = {Proceedings of the 2023 {{ACM Workshop}} on {{Secure}} and {{Trustworthy Superapps}}},
  author = {Long, Mengyi and Xu, Yue and Wu, Jiangrong and Ou, Qihua and Nan, Yuhong},
  date = {2023-11-26},
  series = {{{SaTS}} '23},
  pages = {33--40},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3605762.3624431},
  url = {https://dl.acm.org/doi/10.1145/3605762.3624431},
  urldate = {2025-02-15},
  abstract = {Dark User Interface (DUI) refers to deceptive UI that lets users do something they do not intend to do, such as clicking and opening an advertisement. Previous research has shown that DUI in mobile apps is becoming an increasing concern for app users. Meanwhile, due to the lack of a dominant app store such as Google Play, mobile apps in China are more difficult to regulate. As a result, user-harmful behaviors such as DUI are more likely to happen. In this paper, we systematically investigate the prevalence, distribution, and the impact of dark UI patterns (as DUI patterns for short) in the mobile ecosystem China. To this end, we first summarize a taxonomy of DUI patterns based on the UI layout, UI element, and user interactions in mobile apps. With this taxonomy, we implement a lightweight pipeline to identify various DUIs from a set of top 150 popular apps. The results of the analysis show that DUIs exist widely in modern applications, with different categories and contexts. Additionally, we extend our analysis to examine DUIs in mini-apps - an emerging type of mobile apps that is with great popularity in China. Our research highlights a number of stealthy dark UI patterns that may bring confusion, or even harmful impacts to app users. Additionally, we show that better regulation and user awareness of DUI in mobile applications are urgently needed.},
  isbn = {9798400702587},
  file = {/Users/feymanpaper/Zotero/storage/9H2CKHT7/Long et al_2023_Understanding Dark UI Patterns in the Mobile Ecosystem.pdf}
}

@inproceedings{luDemystifyingResourceManagement2020,
  title = {Demystifying {{Resource Management Risks}} in {{Emerging Mobile App-in-App Ecosystems}}},
  booktitle = {Proceedings of the 2020 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Lu, Haoran and Xing, Luyi and Xiao, Yue and Zhang, Yifan and Liao, Xiaojing and Wang, XiaoFeng and Wang, Xueqiang},
  date = {2020-10-30},
  pages = {569--585},
  publisher = {ACM},
  location = {Virtual Event USA},
  doi = {10.1145/3372297.3417255},
  url = {https://dl.acm.org/doi/10.1145/3372297.3417255},
  urldate = {2022-12-27},
  abstract = {App-in-app is a new and trending mobile computing paradigm in which native app-like software modules, called sub-apps, are hosted by popular mobile apps such as Wechat, Alipay, Baidu, TikTok and Chrome, to enrich the host app’s functionalities and to form an “all-in-one app" ecosystem. Sub-apps access system resources through the host, and their functionalities come close to regular mobile apps (taking photos, recording voices, banking, shopping, etc.). Less clear, however, is whether the host app, typically a thirdparty app, is capable of securely managing sub-apps and their access to system resources. In this paper, we report the first systematic study on the resource management in app-in-app systems. Our study reveals high-impact security flaws, which allow the adversary to stealthily escalate privilege (e.g., accessing the camera, photo gallery, microphone, etc.) or acquire sensitive data (e.g., location, passwords of Amazon, Google, etc.). To understand the impacts of those flaws, we developed an analysis tool that automatically assesses 11 popular app-in-app platforms on both Android and iOS. Our results brought to light the prevalence of the security flaws. We further discuss the lessons learned and propose mitigation strategies.},
  eventtitle = {{{CCS}} '20: 2020 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-7089-9},
  langid = {english},
  keywords = {app_in_app},
  file = {/Users/feymanpaper/Zotero/storage/UI6EIE32/Lu 等 - 2020 - Demystifying Resource Management Risks in Emerging.pdf}
}

@inproceedings{lvFastbot2ReusableAutomated2022,
  title = {Fastbot2: {{Reusable Automated Model-based GUI Testing}} for {{Android Enhanced}} by {{Reinforcement Learning}}},
  shorttitle = {Fastbot2},
  booktitle = {Proceedings of the 37th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Lv, Zhengwei and Peng, Chao and Zhang, Zhao and Su, Ting and Liu, Kai and Yang, Ping},
  date = {2022-10-10},
  pages = {1--5},
  publisher = {ACM},
  location = {Rochester MI USA},
  doi = {10.1145/3551349.3559505},
  url = {https://dl.acm.org/doi/10.1145/3551349.3559505},
  urldate = {2023-11-22},
  abstract = {We introduce a reusable automated model-based GUI testing technique for Android apps to accelerate the testing cycle. Our key insight is that the knowledge of event-activity transitions from the previous testing runs, i.e., executing which events can reach which activities, is valuable for guiding the follow-up testing runs to quickly cover major app functionalities. To this end, we propose (1) a probabilistic model to memorize and leverage this knowledge during testing, and (2) design a model-based guided testing strategy (enhanced by a reinforcement learning algorithm). We implemented our technique as an automated testing tool named Fastbot2. The evaluation on two popular industrial apps (with billions of user installations), Douyin and Toutiao, shows that Fastbot2 outperforms the stateof-the-art testing tools (Monkey, Ape and Stoat) in both activity coverage and fault detection in the context of continuous testing. To date, Fastbot2 has been deployed in the CI pipeline at ByteDance for nearly two years, and 50.8\% of the developer-fixed crash bugs were reported by Fastbot2, which significantly improves app quality. Fastbot2 has been made publicly available to benefit the community at: https:// github.com/ bytedance/ Fastbot\_Android.},
  eventtitle = {{{ASE}} '22: 37th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  isbn = {978-1-4503-9475-8},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/TQ2SDBKD/Lv et al. - 2022 - Fastbot2 Reusable Automated Model-based GUI Testi.pdf}
}

@inproceedings{machiryDynodroidInputGeneration2013,
  title = {Dynodroid: An Input Generation System for {{Android}} Apps},
  shorttitle = {Dynodroid},
  booktitle = {Proceedings of the 2013 9th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Machiry, Aravind and Tahiliani, Rohan and Naik, Mayur},
  date = {2013-08-18},
  pages = {224--234},
  publisher = {ACM},
  location = {Saint Petersburg Russia},
  doi = {10.1145/2491411.2491450},
  url = {https://dl.acm.org/doi/10.1145/2491411.2491450},
  urldate = {2023-05-31},
  abstract = {We present a system Dynodroid for generating relevant inputs to unmodified Android apps. Dynodroid views an app as an event-driven program that interacts with its environment by means of a sequence of events through the Android framework. By instrumenting the framework once and for all, Dynodroid monitors the reaction of an app upon each event in a lightweight manner, using it to guide the generation of the next event to the app. Dynodroid also allows interleaving events from machines, which are better at generating a large number of simple inputs, with events from humans, who are better at providing intelligent inputs.},
  eventtitle = {{{ESEC}}/{{FSE}}'13: {{Joint Meeting}} of the {{European Software Engineering Conference}} and the {{ACM SIGSOFT Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-2237-9},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/BVTW7RLS/Machiry et al. - 2013 - Dynodroid an input generation system for Android .pdf}
}

@online{maFine1234Analysis2021,
  title = {Fine with "1234"? {{An Analysis}} of {{SMS One-Time Password Randomness}} in {{Android Apps}}},
  shorttitle = {Fine with "1234"?},
  author = {Ma, Siqi and Li, Juanru and Kim, Hyoungshick and Bertino, Elisa and Nepal, Surya and Ostry, Diethelm and Sun, Cong},
  date = {2021-03-06},
  eprint = {2103.05758},
  eprinttype = {arXiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2103.05758},
  urldate = {2022-12-27},
  abstract = {A fundamental premise of SMS One-Time Password (OTP) is that the used pseudo-random numbers (PRNs) are uniquely unpredictable for each login session. Hence, the process of generating PRNs is the most critical step in the OTP authentication. An improper implementation of the pseudorandom number generator (PRNG) will result in predictable or even static OTP values, making them vulnerable to potential attacks. In this paper, we present a vulnerability study against PRNGs implemented for Android apps. A key challenge is that PRNGs are typically implemented on the server-side, and thus the source code is not accessible. To resolve this issue, we build an analysis tool, OTP-Lint, to assess implementations of the PRNGs in an automated manner without the source code requirement. Through reverse engineering, OTP-Lint identifies the apps using SMS OTP and triggers each app’s login functionality to retrieve OTP values. It further assesses the randomness of the OTP values to identify vulnerable PRNGs. By analyzing 6,431 commercially used Android apps downloaded from Google Play and Tencent Myapp, OTP-Lint identified 399 vulnerable apps that generate predictable OTP values. Even worse, 194 vulnerable apps use the OTP authentication alone without any additional security mechanisms, leading to insecure authentication against guessing attacks and replay attacks.},
  langid = {english},
  pubstate = {prepublished},
  file = {/Users/feymanpaper/Zotero/storage/L3NEHN86/Ma 等 - 2021 - Fine with 1234 An Analysis of SMS One-Time Pass.pdf}
}

@inproceedings{mahmoodEvoDroidSegmentedEvolutionary2014,
  title = {{{EvoDroid}}: Segmented Evolutionary Testing of {{Android}} Apps},
  shorttitle = {{{EvoDroid}}},
  booktitle = {Proceedings of the 22nd {{ACM SIGSOFT International Symposium}} on {{Foundations}} of {{Software Engineering}}},
  author = {Mahmood, Riyadh and Mirzaei, Nariman and Malek, Sam},
  year = {11 月 11, 2014},
  series = {{{FSE}} 2014},
  pages = {599--609},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2635868.2635896},
  url = {https://dl.acm.org/doi/10.1145/2635868.2635896},
  urldate = {2023-06-01},
  abstract = {Proliferation of Android devices and apps has created a demand for applicable automated software testing techniques. Prior research has primarily focused on either unit or GUI testing of Android apps, but not their end-to-end system testing in a systematic manner. We present EvoDroid, an evolutionary approach for system testing of Android apps. EvoDroid overcomes a key shortcoming of using evolutionary techniques for system testing, i.e., the inability to pass on genetic makeup of good individuals in the search. To that end, EvoDroid combines two novel techniques: (1) an Android-specific program analysis technique that identifies the segments of the code amenable to be searched independently, and (2) an evolutionary algorithm that given information of such segments performs a step-wise search for test cases reaching deep into the code. Our experiments have corroborated EvoDroid’s ability to achieve significantly higher code coverage than existing Android testing tools.},
  isbn = {978-1-4503-3056-5},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/LST3MUCD/Mahmood et al_2014_EvoDroid.pdf}
}

@online{mansurAidUIAutomatedRecognition2023,
  title = {{{AidUI}}: {{Toward Automated Recognition}} of {{Dark Patterns}} in {{User Interfaces}}},
  shorttitle = {{{AidUI}}},
  author = {Mansur, SM Hasan and Salma, Sabiha and Awofisayo, Damilola and Moran, Kevin},
  date = {2023-03-12},
  eprint = {2303.06782},
  eprinttype = {arXiv},
  eprintclass = {cs},
  doi = {10.48550/arXiv.2303.06782},
  url = {http://arxiv.org/abs/2303.06782},
  urldate = {2024-12-06},
  abstract = {Past studies have illustrated the prevalence of UI dark patterns, or user interfaces that can lead end-users toward (unknowingly) taking actions that they may not have intended. Such deceptive UI designs can be either intentional (to benefit an online service) or unintentional (through complicit design practices) and can result in adverse effects on end users, such as oversharing personal information or financial loss. While significant research progress has been made toward the development of dark pattern taxonomies across different software domains, developers and users currently lack guidance to help recognize, avoid, and navigate these often subtle design motifs. However, automated recognition of dark patterns is a challenging task, as the instantiation of a single type of pattern can take many forms, leading to significant variability.},
  langid = {english},
  pubstate = {prepublished},
  keywords = {Computer Science - Computer Vision and Pattern Recognition,Computer Science - Human-Computer Interaction,Computer Science - Machine Learning,Computer Science - Software Engineering},
  note = {Comment: 13 pages, Accepted at The 45th IEEE/ACM International Conference on Software Engineering (ICSE 2023), Melbourne, Australia, May 14th-20th, 2023},
  file = {/Users/feymanpaper/Zotero/storage/LICNVU8N/Mansur 等 - 2023 - AidUI Toward Automated Recognition of Dark Patter.pdf}
}

@inproceedings{maoSapienzMultiobjectiveAutomated2016,
  title = {Sapienz: Multi-Objective Automated Testing for {{Android}} Applications},
  shorttitle = {Sapienz},
  booktitle = {Proceedings of the 25th {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Mao, Ke and Harman, Mark and Jia, Yue},
  year = {7 月 18, 2016},
  series = {{{ISSTA}} 2016},
  pages = {94--105},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2931037.2931054},
  url = {https://dl.acm.org/doi/10.1145/2931037.2931054},
  urldate = {2023-06-02},
  abstract = {We introduce Sapienz, an approach to Android testing that uses multi-objective search-based testing to automatically explore and optimise test sequences, minimising length, while simultaneously maximising coverage and fault revelation. Sapienz combines random fuzzing, systematic and search-based exploration, exploiting seeding and multi-level instrumentation. Sapienz significantly outperforms (with large effect size) both the state-of-the-art technique Dynodroid and the widely-used tool, Android Monkey, in 7/10 experiments for coverage, 7/10 for fault detection and 10/10 for fault-revealing sequence length. When applied to the top 1,000 Google Play apps, Sapienz found 558 unique, previously unknown crashes. So far we have managed to make contact with the developers of 27 crashing apps. Of these, 14 have confirmed that the crashes are caused by real faults. Of those 14, six already have developer-confirmed fixes.},
  isbn = {978-1-4503-4390-9},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/5KJA468K/Mao et al_2016_Sapienz.pdf}
}

@inproceedings{marianiSemanticMatchingGUI2021,
  title = {Semantic Matching of {{GUI}} Events for Test Reuse: Are We There Yet?},
  shorttitle = {Semantic Matching of {{GUI}} Events for Test Reuse},
  booktitle = {Proceedings of the 30th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Mariani, Leonardo and Mohebbi, Ali and Pezzè, Mauro and Terragni, Valerio},
  date = {2021-07-11},
  pages = {177--190},
  publisher = {ACM},
  location = {Virtual Denmark},
  doi = {10.1145/3460319.3464827},
  url = {https://dl.acm.org/doi/10.1145/3460319.3464827},
  urldate = {2023-06-04},
  eventtitle = {{{ISSTA}} '21: 30th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-4503-8459-9},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/Z2NDL29F/Mariani et al_2021_Semantic matching of GUI events for test reuse.pdf}
}

@article{MeetingNeedsAgeing2017,
  title = {Meeting the {{Needs}} of {{Ageing People}}},
  date = {2017},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/68SXQULN/2017 - Meeting the Needs of Ageing People.pdf}
}

@inproceedings{memonGUIRippingReverse2003,
  title = {{{GUI}} Ripping: Reverse Engineering of Graphical User Interfaces for Testing},
  shorttitle = {{{GUI}} Ripping},
  booktitle = {10th {{Working Conference}} on {{Reverse Engineering}}, 2003. {{WCRE}} 2003. {{Proceedings}}.},
  author = {Memon, A. and Banerjee, I. and Nagarajan, A.},
  date = {2003-01},
  pages = {260--269},
  issn = {1095-1350},
  doi = {10.1109/WCRE.2003.1287256},
  eventtitle = {10th {{Working Conference}} on {{Reverse Engineering}}, 2003. {{WCRE}} 2003. {{Proceedings}}.},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/X7I53RAX/Memon et al_2003_GUI ripping.pdf}
}

@inproceedings{mirzaeiReducingCombinatoricsGUI2016,
  title = {Reducing Combinatorics in {{GUI}} Testing of Android Applications},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Software Engineering}}},
  author = {Mirzaei, Nariman and Garcia, Joshua and Bagheri, Hamid and Sadeghi, Alireza and Malek, Sam},
  year = {5 月 14, 2016},
  series = {{{ICSE}} '16},
  pages = {559--570},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2884781.2884853},
  url = {https://dl.acm.org/doi/10.1145/2884781.2884853},
  urldate = {2023-06-02},
  abstract = {The rising popularity of Android and the GUI-driven nature of its apps have motivated the need for applicable automated GUI testing techniques. Although exhaustive testing of all possible combinations is the ideal upper bound in combinatorial testing, it is often infeasible, due to the combinatorial explosion of test cases. This paper presents TrimDroid, a framework for GUI testing of Android apps that uses a novel strategy to generate tests in a combinatorial, yet scalable, fashion. It is backed with automated program analysis and formally rigorous test generation engines. TrimDroid relies on program analysis to extract formal specifications. These specifications express the app's behavior (i.e., control flow between the various app screens) as well as the GUI elements and their dependencies. The dependencies among the GUI elements comprising the app are used to reduce the number of combinations with the help of a solver. Our experiments have corroborated TrimDroid's ability to achieve a comparable coverage as that possible under exhaustive GUI testing using significantly fewer test cases.},
  isbn = {978-1-4503-3900-1},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/ULZL68Z8/Mirzaei et al_2016_Reducing combinatorics in GUI testing of android applications.pdf}
}

@inproceedings{nguyenFreelyGivenConsent2022,
  title = {Freely {{Given Consent}}?: {{Studying Consent Notice}} of {{Third-Party Tracking}} and {{Its Violations}} of {{GDPR}} in {{Android Apps}}},
  shorttitle = {Freely {{Given Consent}}?},
  booktitle = {Proceedings of the 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Nguyen, Trung Tin and Backes, Michael and Stock, Ben},
  date = {2022-11-07},
  pages = {2369--2383},
  publisher = {ACM},
  location = {Los Angeles CA USA},
  doi = {10.1145/3548606.3560564},
  url = {https://dl.acm.org/doi/10.1145/3548606.3560564},
  urldate = {2024-04-15},
  abstract = {Adopted in May 2018, the European Union’s General Data Protection Regulation (GDPR) requires the consent for processing users’ personal data to be freely given, specific, informed, and unambiguous. While prior work has shown that this often is not given through automated network traffic analysis, no research has systematically studied how consent notices are currently implemented and whether they conform to GDPR in mobile apps. To close this research gap, we perform the first large-scale study into consent notices for third-party tracking in Android apps to understand the current practices and the current state of GDPR’s consent violations. Specifically, we propose a mostly automated and scalable approach to identify the currently implemented consent notices and apply it to a set of 239,381 Android apps. As a result, we recognize four widely implemented mechanisms to interact with the consent user interfaces from 13,082 apps. We then develop a tool that automatically detects users’ personal data sent out to the Internet with different consent conditions based on the identified mechanisms. Doing so, we find 30,160 apps do not even attempt to implement consent notices for sharing users’ personal data with third-party data controllers, which mandate explicit consent under GDPR. In contrast, out of 13,082 apps implemented consent notices, we identify 2,688 (20.54\%) apps violate at least one of the GDPR consent requirements, such as trying to deceive users into accepting all data sharing or even continuously transmitting data when users have explicitly opted out. To allow developers to address the problems, we send emails to notify affected developers and gather insights from their responses. Our study shows the urgent need for more transparent processing of personal data and supporting developers in this endeavor to comply with legislation, ensuring users can make free and informed choices regarding their data.},
  eventtitle = {{{CCS}} '22: 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-9450-5},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/SPRUUBF8/Nguyen et al. - 2022 - Freely Given Consent Studying Consent Notice of .pdf}
}

@article{nguyenPenetrationVisionVirtual,
  title = {Penetration {{Vision}} through {{Virtual Reality Headsets}}: {{Identifying}} 360-Degree {{Videos}} from {{Head Movements}}},
  author = {Nguyen, Anh and Zhang, Xiaokuan and Yan, Zhisheng},
  abstract = {In this paper, we present the first contactless side-channel attack for identifying 360◦ videos being viewed in a Virtual Reality (VR) Head Mounted Display (HMD). Although the video content is displayed inside the HMD without any external exposure, we observe that user head movements are driven by the video content, which creates a unique side channel that does not exist in traditional 2D videos. By recording the user whose vision is blocked by the HMD via a malicious camera, an attacker can analyze the correlation between the user’s head movements and the victim video to infer the video title. To exploit this new vulnerability, we present INTRUDE, a system for identifying 360◦ videos from recordings of user head movements. INTRUDE is empowered by an HMD-based head movement estimation scheme to extract a head movement trace from the recording and a video saliency-based trace-fingerprint matching framework to infer the video title. Evaluation results show that INTRUDE achieves over 96\% of accuracy for video identification and is robust under different recording environments. Moreover, INTRUDE maintains its effectiveness in the open-world identification scenario.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/XCC6ZVYQ/Nguyen 等 - Penetration Vision through Virtual Reality Headset.pdf}
}

@article{NiaoGeDeLinuxSiFangCaiJiChuXueXiPian,
  title = {鸟哥的 Linux 私房菜：基础学习篇 第四版},
  langid = {chinese},
  file = {/Users/feymanpaper/Zotero/storage/9CM7MYEY/鸟哥的 Linux 私房菜：基础学习篇 第四版.pdf}
}

@inproceedings{nouwensDarkPatternsGDPR2020a,
  title = {Dark {{Patterns}} after the {{GDPR}}: {{Scraping Consent Pop-ups}} and {{Demonstrating}} Their {{Influence}}},
  shorttitle = {Dark {{Patterns}} after the {{GDPR}}},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Nouwens, Midas and Liccardi, Ilaria and Veale, Michael and Karger, David and Kagal, Lalana},
  date = {2020-04-23},
  series = {{{CHI}} '20},
  pages = {1--13},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3313831.3376321},
  url = {https://dl.acm.org/doi/10.1145/3313831.3376321},
  urldate = {2025-02-15},
  abstract = {New consent management platforms (CMPs) have been introduced to the web to conform with the EU's General Data Protection Regulation, particularly its requirements for consent when companies collect and process users' personal data. This work analyses how the most prevalent CMP designs affect people's consent choices. We scraped the designs of the five most popular CMPs on the top 10,000 websites in the UK (n=680). We found that dark patterns and implied consent are ubiquitous; only 11.8\% meet our minimal requirements based on European law. Second, we conducted a field experiment with 40 participants to investigate how the eight most common designs affect consent choices. We found that notification style (banner or barrier) has no effect; removing the opt-out button from the first page increases consent by 22-23 percentage points; and providing more granular controls on the first page decreases consent by 8-20 percentage points. This study provides an empirical basis for the necessary regulatory action to enforce the GDPR, in particular the possibility of focusing on the centralised, third-party CMP services as an effective way to increase compliance.},
  isbn = {978-1-4503-6708-0},
  file = {/Users/feymanpaper/Zotero/storage/HH64RKFK/Nouwens et al_2020_Dark Patterns after the GDPR.pdf}
}

@inproceedings{ohDeViewConfiningProgressive2022,
  title = {{{DeView}}: {{Confining Progressive Web Applications}} by {{Debloating Web APIs}}},
  shorttitle = {{{DeView}}},
  booktitle = {Proceedings of the 38th {{Annual Computer Security Applications Conference}}},
  author = {Oh, ChangSeok and Lee, Sangho and Qian, Chenxiong and Koo, Hyungjoon and Lee, Wenke},
  date = {2022-12-05},
  pages = {881--895},
  publisher = {ACM},
  location = {Austin TX USA},
  doi = {10.1145/3564625.3567987},
  url = {https://dl.acm.org/doi/10.1145/3564625.3567987},
  urldate = {2023-04-13},
  abstract = {A progressive web application (PWA) becomes an attractive option for building universal applications based on feature-rich web Application Programming Interfaces (APIs). While flexible, such vast APIs inevitably bring a significant increase in an API attack surface, which commonly corresponds to a functionality that is neither needed nor wanted by the application. A promising approach to reduce the API attack surface is software debloating, a technique wherein an unused functionality is programmatically removed from an application. Unfortunately, debloating PWAs is challenging, given the monolithic design and non-deterministic execution of a modern web browser. In this paper, we present DeView, a practical approach that reduces the attack surface of a PWA by blocking unnecessary but accessible web APIs. DeView tackles the challenges of PWA debloating by i) record-and-replay web API profiling that identifies needed web APIs on an app-by-app basis by replaying (recorded) browser interactions and ii) compiler-assisted browser debloating that eliminates the entry functions of corresponding web APIs from the mapping between web API and its entry point in a binary. Our evaluation shows the effectiveness and practicality of DeView. DeView successfully eliminates 91.8\% of accessible web APIs while i) maintaining original functionalities and ii) preventing 76.3\% of known exploits on average.},
  eventtitle = {{{ACSAC}}: {{Annual Computer Security Applications Conference}}},
  isbn = {978-1-4503-9759-9},
  langid = {english},
  file = {/Users/feymanpaper/Downloads/deview.pdf}
}

@article{ongaroSearchUnderstandableConsensus,
  title = {In {{Search}} of an {{Understandable Consensus Algorithm}}},
  author = {Ongaro, Diego and Ousterhout, John},
  abstract = {Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems. In order to enhance understandability, Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered. Results from a user study demonstrate that Raft is easier for students to learn than Paxos. Raft also includes a new mechanism for changing the cluster membership, which uses overlapping majorities to guarantee safety.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/58UYHYS7/Ongaro and Ousterhout - In Search of an Understandable Consensus Algorithm.pdf}
}

@inproceedings{panReinforcementLearningBased2020,
  title = {Reinforcement Learning Based Curiosity-Driven Testing of {{Android}} Applications},
  booktitle = {Proceedings of the 29th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Pan, Minxue and Huang, An and Wang, Guoxin and Zhang, Tian and Li, Xuandong},
  date = {2020-07-18},
  pages = {153--164},
  publisher = {ACM},
  location = {Virtual Event USA},
  doi = {10.1145/3395363.3397354},
  url = {https://dl.acm.org/doi/10.1145/3395363.3397354},
  urldate = {2023-06-28},
  eventtitle = {{{ISSTA}} '20: 29th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-4503-8008-9},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/PI3VQ6ST/Pan et al. - 2020 - Reinforcement learning based curiosity-driven test.pdf}
}

@article{philippaertsOAuchExploringSecurity2022a,
  title = {{{OAuch}}: {{Exploring Security Compliance}} in the {{OAuth}} 2.0 {{Ecosystem}}},
  author = {Philippaerts, Pieter and Preuveneers, Davy and Joosen, Wouter},
  date = {2022},
  abstract = {The OAuth 2.0 protocol is a popular and widely adopted authorization protocol. It has been proven secure in a comprehensive formal security analysis, yet new vulnerabilities continue to appear in popular OAuth implementations.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/9A3E5NQZ/Philippaerts 等 - 2022 - OAuch Exploring Security Compliance in the OAuth .pdf}
}

@inproceedings{possematoPreventingDetectingState2021,
  title = {Preventing and {{Detecting State Inference Attacks}} on {{Android}}},
  booktitle = {Proceedings 2021 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Possemato, Andrea and Nisi, Dario and Fratantonio, Yanick},
  date = {2021},
  publisher = {Internet Society},
  location = {Virtual},
  doi = {10.14722/ndss.2021.24479},
  url = {https://www.ndss-symposium.org/wp-content/uploads/ndss2021_3B-5_24479_paper.pdf},
  urldate = {2022-12-27},
  abstract = {In the realm of the Android ecosystem, one relevant threat is posed by phishing attacks. Phishing attacks are particularly problematic for mobile platforms because they do not provide enough information for a user to reliably distinguish a legitimate app from a malicious app spoofing the UI of the legitimate one. A key factor that determines the success rate of a phishing attack is proper timing: The user is more prone to provide sensitive data (such as her passwords) if the malicious spoofed UI appears when the victim expects to interact with the target app. On Android, malware determines the right timing by mounting so-called state inference attacks, which can be used, for example, to infer the exact moment that the user started a target app and thus expects to interact with it. Even though Android app sandbox is designed to prevent these attacks, they are still possible by abusing vulnerable APIs that leak such sensitive information: the usual scenario is a malicious app that “polls” these vulnerable APIs, infers when a target app is about to be used by the user, and makes the spoofed UI appear on top of the screen at the right time. All previous bugs of this kind have been fixed in the latest version of Android.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-66-2},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/P2U9KTVG/Possemato 等 - 2021 - Preventing and Detecting State Inference Attacks o.pdf}
}

@article{reardon50WaysLeak,
  title = {50 {{Ways}} to {{Leak Your Data}}: {{An Exploration}} of {{Apps}}’ {{Circumvention}} of the {{Android Permissions System}}},
  author = {Reardon, Joel and Feal, Álvaro and Wijesekera, Primal},
  abstract = {Modern smartphone platforms implement permission-based models to protect access to sensitive data and system resources. However, apps can circumvent the permission model and gain access to protected data without user consent by using both covert and side channels. Side channels present in the implementation of the permission system allow apps to access protected data and system resources without permission; whereas covert channels enable communication between two colluding apps so that one app can share its permissionprotected data with another app lacking those permissions. Both pose threats to user privacy.},
  langid = {english},
  file = {/Users/feymanpaper/gosec/privacy policy/ASE19_1Goal-Driven_Exploration_for_Android_Applications.pdf;/Users/feymanpaper/Zotero/storage/VAX42BXG/Reardon 等 - 50 Ways to Leak Your Data An Exploration of Apps’.pdf}
}

@inproceedings{santhanamScrapingStickyLeftovers2022,
  title = {Scraping {{Sticky Leftovers}}: {{App User Information Left}} on {{Servers After Account Deletion}}},
  shorttitle = {Scraping {{Sticky Leftovers}}},
  booktitle = {2022 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  author = {Santhanam, Preethi and Dang, Hoang and Shan, Zhiyong and Neamtiu, Iulian},
  date = {2022-05},
  pages = {2145--2160},
  publisher = {IEEE},
  location = {San Francisco, CA, USA},
  doi = {10.1109/SP46214.2022.9833720},
  url = {https://ieeexplore.ieee.org/document/9833720/},
  urldate = {2022-12-27},
  abstract = {Sixty-five percent of mobile apps require user accounts for offering fullfledged functionality. Account information includes private data, e.g., address, phone number, credit card. Our concern is “leftover” account data kept on the server after account deletion, which can be a significant privacy violation. Specifically, we analyzed 1,435 popular apps from Google Play (and 771 associated websites), of which 678 have their own sign-up process, to answer questions such as: Can accounts be deleted at all? Following account deletion, will user data remain on the app’s servers? If so, for how long? Do apps keep their promise to remove data? Answering these questions, and more generally, understanding and tackling the leftover account problem, is challenging. A fundamental obstacle is that leftover data is manipulated and retained in a private space, on the app’s backend servers; we devised a novel, reverse-engineering approach to infer leftover data from app–server communication. Another obstacle is the distributed nature of this data: program analysis as well as information retrieval are required on both the app and its website. We have developed an end-to-end solution (static analysis, dynamic analysis, natural language processing) to the leftover account problem. First, our toolchain checks whether an app, or its website, support account deletion; next, it checks whether the app/website have a data retention policy, and whether the account is left on servers after deletion, or after the specified retention period; finally, it automatically cleans up leftover accounts. We found that 64.45\% of apps do not offer any means for users to delete accounts; 2.5\% of apps still keep account data on app servers even after accounts are deleted by users. Only 5\% of apps specify a retention period; some of these apps violate their own policy by still retaining data months after the period has ended. Experiments show that our approach is effective, with an F-measure {$>$} 88\%, and efficient, with a typical analysis time of 279 seconds per app/website.},
  eventtitle = {2022 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  isbn = {978-1-66541-316-9},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/CNAPN5PL/Santhanam 等 - 2022 - Scraping Sticky Leftovers App User Information Le.pdf}
}

@article{seguraMetamorphicTestingRESTful2018,
  title = {Metamorphic {{Testing}} of {{RESTful Web APIs}}},
  author = {Segura, Sergio and Parejo, Jose A. and Troya, Javier and Ruiz-Cortes, Antonio},
  date = {2018-11-01},
  journaltitle = {IEEE Transactions on Software Engineering},
  shortjournal = {IIEEE Trans. Software Eng.},
  volume = {44},
  number = {11},
  pages = {1083--1099},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2017.2764464},
  url = {https://ieeexplore.ieee.org/document/8074764/},
  urldate = {2022-12-28},
  abstract = {Web Application Programming Interfaces (APIs) allow systems to interact with each other over the network. Modern Web APIs often adhere to the REST architectural style, being referred to as RESTful Web APIs. RESTful Web APIs are decomposed into multiple resources (e.g., a video in the YouTube API) that clients can manipulate through HTTP interactions. Testing Web APIs is critical but challenging due to the difficulty to assess the correctness of API responses, i.e., the oracle problem. Metamorphic testing alleviates the oracle problem by exploiting relations (so-called metamorphic relations) among multiple executions of the program under test. In this paper, we present a metamorphic testing approach for the detection of faults in RESTful Web APIs. We first propose six abstract relations that capture the shape of many of the metamorphic relations found in RESTful Web APIs, we call these Metamorphic Relation Output Patterns (MROPs). Each MROP can then be instantiated into one or more concrete metamorphic relations. The approach was evaluated using both automatically seeded and real faults in six subject Web APIs. Among other results, we identified 60 metamorphic relations (instances of the proposed MROPs) in the Web APIs of Spotify and YouTube. Each metamorphic relation was implemented using both random and manual test data, running over 4.7K automated tests. As a result, 11 issues were detected (3 in Spotify and 8 in YouTube), 10 of them confirmed by the API developers or reproduced by other users, supporting the effectiveness of the approach.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/KBF34P7S/Segura 等 - 2018 - Metamorphic Testing of RESTful Web APIs.pdf}
}

@article{shenCanSystemsExplain,
  title = {Can {{Systems Explain Permissions Better}}? {{Understanding Users}}’ {{Misperceptions}} under {{Smartphone Runtime Permission Model}}},
  author = {Shen, Bingyu and Wei, Lili and Xiang, Chengcheng and Wu, Yudong and Shen, Mingyao and Zhou, Yuanyuan and Jin, Xinxin},
  abstract = {Current smartphone operating systems enable users to manage permissions according to their personal preferences with a runtime permission model. Nonetheless, the systems provide very limited information when requesting permissions, making it difficult for users to understand permissions’ capabilities and potentially induced risks.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/H3JPP5NF/Shen et al. - Can Systems Explain Permissions Better Understand.pdf}
}

@inproceedings{shezanTKPERMCrossplatformPermission2020,
  title = {{{TKPERM}}: {{Cross-platform Permission Knowledge Transfer}} to {{Detect Overprivileged Third-party Applications}}},
  shorttitle = {{{TKPERM}}},
  booktitle = {Proceedings 2020 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Shezan, Faysal Hossain and Cheng, Kaiming and Zhang, Zhen and Cao, Yinzhi and Tian, Yuan},
  date = {2020},
  publisher = {Internet Society},
  location = {San Diego, CA},
  doi = {10.14722/ndss.2020.24287},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2020/02/24287.pdf},
  urldate = {2022-12-27},
  abstract = {Permission-based access control enables users to manage and control their sensitive data for third-party applications. In an ideal scenario, third-party application includes enough details to illustrate the usage of such data, while the reality is that many descriptions of third-party applications are vague about their security or privacy activities. As a result, users are left with insufficient details when granting sensitive data to these applications. Prior works, such as WHYPER and AutoCog, have addressed the aforementioned problem via a so-called permission correlation system. Such a system correlates thirdparty applications’ description with their requested permissions and determines an application as overprivileged, if a mismatch between the requested permission and the description is found. However, although prior works are successful on their own platforms, such as Android eco-system, they are not directly applicable to new platforms, such as Chrome extensions and IFTTT, without extensive data labeling and parameter tuning.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-61-7},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/H8SDJ2TI/Shezan 等 - 2020 - TKPERM Cross-platform Permission Knowledge Transf.pdf}
}

@article{slocumThatDoesntGo,
  title = {That {{Doesn}}’t {{Go There}}: {{Attacks}} on {{Shared State}} in {{Multi-User Augmented Reality Applications}}},
  author = {Slocum, Carter and Zhang, Yicheng and Shayegani, Erfan and Zaree, Pedram and Abu-Ghazaleh, Nael and Chen, Jiasi},
  abstract = {Augmented Reality (AR) can enable shared virtual experiences between multiple users. In order to do so, it is crucial for multi-user AR applications to establish a consensus on the “shared state” of the virtual world and its augmentations through which users interact. Current methods to create and access shared state collect sensor data from devices (e.g., camera images), process them, and integrate them into the shared state. However, this process introduces new vulnerabilities and opportunities for attacks. Maliciously writing false data to “poison” the shared state is a major concern for the security of the downstream victims that depend on it. Another type of vulnerability arises when reading the shared state: by providing false inputs, an attacker can view hologram augmentations at locations they are not allowed to access. In this work, we demonstrate a series of novel attacks on multiple AR frameworks with shared states, focusing on three publicly accessible frameworks. We show that these frameworks, while using different underlying implementations, scopes, and mechanisms to read from and write to the shared state, have shared vulnerability to a unified threat model. Our evaluations of these state-of-the-art AR frameworks demonstrate reliable attacks both on updating and accessing the shared state across different systems. To defend against such threats, we discuss a number of potential mitigation strategies that can help enhance the security of multi-user AR applications and implement an initial prototype.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/JM4ICJIY/Slocum 等 - That Doesn’t Go There Attacks on Shared State in .pdf}
}

@article{songUnderstandingJavaScriptVulnerabilities2020,
  title = {Understanding {{JavaScript Vulnerabilities}} in {{Large Real-World Android Applications}}},
  author = {Song, Wei and Huang, Qingqing and Huang, Jeff},
  date = {2020-09-01},
  journaltitle = {IEEE Transactions on Dependable and Secure Computing},
  shortjournal = {IEEE Trans. Dependable and Secure Comput.},
  volume = {17},
  number = {5},
  pages = {1063--1078},
  issn = {1545-5971, 1941-0018, 2160-9209},
  doi = {10.1109/TDSC.2018.2845851},
  url = {https://ieeexplore.ieee.org/document/8378244/},
  urldate = {2022-12-27},
  abstract = {JavaScript-related vulnerabilities are becoming a major security threat to hybrid mobile applications. In this article, we present a systematic study to understand how JavaScript is used in real-world Android apps and how it may lead to security vulnerabilities. We begin by conducting an empirical study on the top-100 most popular Android apps to investigate JavaScript usage and its related security vulnerabilities. Our study identifies four categories of JavaScript usage and finds that three of these categories, if inappropriately used, can respectively lead to three types of vulnerabilities. We also design and implement an automatic tool named JSDroid to detect JavaScript-related vulnerabilities. We have applied JSDroid to 1,000 large real-world Android apps and found that over 70\% of these apps have potential JavaScript-related vulnerabilities and 20\% of them can be successfully exploited. Moreover, based on the vulnerabilities identified by JSDroid, we have successfully launched real attacks on 30 real-world apps.},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/DZRA89IG/Song 等 - 2020 - Understanding JavaScript Vulnerabilities in Large .pdf}
}

@inproceedings{suBenchmarkingAutomatedGUI2021,
  title = {Benchmarking Automated {{GUI}} Testing for {{Android}} against Real-World Bugs},
  booktitle = {Proceedings of the 29th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Su, Ting and Wang, Jue and Su, Zhendong},
  date = {2021-08-20},
  pages = {119--130},
  publisher = {ACM},
  location = {Athens Greece},
  doi = {10.1145/3468264.3468620},
  url = {https://dl.acm.org/doi/10.1145/3468264.3468620},
  urldate = {2023-06-04},
  abstract = {For ensuring the reliability of Android apps, there has been tremendous, continuous progress on improving automated GUI testing in the past decade. Specifically, dozens of testing techniques and tools have been developed and demonstrated to be effective in detecting crash bugs and outperform their respective prior work in the number of detected crashes. However, an overarching question łHow effectively and thoroughly can these tools find crash bugs in practice?ž has not been well-explored, which requires a ground-truth benchmark with real-world bugs. Since prior studies focus on tool comparisons w.r.t. some selected apps, they cannot provide direct, in-depth answers to this question.},
  eventtitle = {{{ESEC}}/{{FSE}} '21: 29th {{ACM Joint European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-8562-6},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/9PGT4A3C/Su et al. - 2021 - Benchmarking automated GUI testing for Android aga.pdf}
}

@inproceedings{suFSMdroidGuidedGUI2016,
  title = {{{FSMdroid}}: Guided {{GUI}} Testing of Android Apps},
  shorttitle = {{{FSMdroid}}},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Software Engineering Companion}}},
  author = {Su, Ting},
  date = {2016-05-14},
  pages = {689--691},
  publisher = {ACM},
  location = {Austin Texas},
  doi = {10.1145/2889160.2891043},
  url = {https://dl.acm.org/doi/10.1145/2889160.2891043},
  urldate = {2023-06-02},
  eventtitle = {{{ICSE}} '16: 38th {{International Conference}} on {{Software Engineering}}},
  isbn = {978-1-4503-4205-6},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/NKJHFV46/Su_2016_FSMdroid.pdf}
}

@article{suFullyAutomatedFunctional2021,
  title = {Fully Automated Functional Fuzzing of {{Android}} Apps for Detecting Non-Crashing Logic Bugs},
  author = {Su, Ting and Yan, Yichen and Wang, Jue and Sun, Jingling and Xiong, Yiheng and Pu, Geguang and Wang, Ke and Su, Zhendong},
  date = {2021-10-20},
  journaltitle = {Proceedings of the ACM on Programming Languages},
  shortjournal = {Proc. ACM Program. Lang.},
  volume = {5},
  pages = {1--31},
  issn = {2475-1421},
  doi = {10.1145/3485533},
  url = {https://dl.acm.org/doi/10.1145/3485533},
  urldate = {2022-12-28},
  abstract = {Android apps are GUI-based event-driven software and have become ubiquitous in recent years. Obviously, functional correctness is critical for an app’s success. However, in addition to crash bugs,               non-crashing functional bugs               (in short as “non-crashing bugs” in this work) like inadvertent function failures, silent user data lost and incorrect display information are prevalent, even in popular, well-tested apps. These non-crashing functional bugs are usually caused by program logic errors and manifest themselves on the graphic user interfaces (GUIs). In practice, such bugs pose significant challenges in effectively detecting them because (1) current practices heavily rely on expensive, small-scale manual validation (               the lack of automation               ); and (2) modern               fully automated               testing has been limited to crash bugs (               the lack of test oracles               ).                                         This paper fills this gap by introducing               independent view fuzzing               ,               a novel, fully automated approach               for detecting non-crashing functional bugs in Android apps. Inspired by metamorphic testing, our key insight is to leverage the commonly-held               independent view property               of Android apps to manufacture property-preserving mutant tests from a set of seed tests that validate certain app properties. The mutated tests help exercise the tested apps under additional, adverse conditions. Any property violations indicate likely functional bugs for further manual confirmation. We have realized our approach as an automated, end-to-end functional fuzzing tool, Genie. Given an app, (1) Genie automatically detects non-crashing bugs without requiring human-provided tests and oracles (thus               fully automated               ); and (2) the detected non-crashing bugs are diverse (thus               general and not limited to specific functional properties               ), which set Genie apart from prior work.                          We have evaluated Genie on 12 real-world Android apps and successfully uncovered 34 previously unknown non-crashing bugs in their latest releases — all have been confirmed, and 22 have already been fixed. Most of the detected bugs are nontrivial and have escaped developer (and user) testing for at least one year and affected many app releases, thus clearly demonstrating Genie’s effectiveness. According to our analysis, Genie achieves a reasonable true positive rate of 40.9\%, while these 34 non-crashing bugs could not be detected by prior fully automated GUI testing tools (as our evaluation confirms). Thus, our work complements and enhances existing manual testing and fully automated testing for crash bugs.},
  issue = {OOPSLA},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/EQ5TRQBG/Su 等 - 2021 - Fully automated functional fuzzing of Android apps.pdf}
}

@inproceedings{suGuidedStochasticModelbased2017,
  title = {Guided, Stochastic Model-Based {{GUI}} Testing of {{Android}} Apps},
  booktitle = {Proceedings of the 2017 11th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Su, Ting and Meng, Guozhu and Chen, Yuting and Wu, Ke and Yang, Weiming and Yao, Yao and Pu, Geguang and Liu, Yang and Su, Zhendong},
  date = {2017-08-21},
  pages = {245--256},
  publisher = {ACM},
  location = {Paderborn Germany},
  doi = {10.1145/3106237.3106298},
  url = {https://dl.acm.org/doi/10.1145/3106237.3106298},
  urldate = {2023-06-02},
  abstract = {Mobile apps are ubiquitous, operate in complex environments and are developed under the time-to-market pressure. Ensuring their correctness and reliability thus becomes an important challenge. This paper introduces Stoat, a novel guided approach to perform stochastic model-based testing on Android apps. Stoat operates in two phases: (1) Given an app as input, it uses dynamic analysis enhanced by a weighted UI exploration strategy and static analysis to reverse engineer a stochastic model of the app’s GUI interactions; and (2) it adapts Gibbs sampling to iteratively mutate/refine the stochastic model and guides test generation from the mutated models toward achieving high code and model coverage and exhibiting diverse sequences. During testing, system-level events are randomly injected to further enhance the testing effectiveness. Stoat was evaluated on 93 open-source apps. The results show (1) the models produced by Stoat cover 17∼31\% more code than those by existing modeling tools; (2) Stoat detects 3X more unique crashes than two state-of-the-art testing tools, Monkey and Sapienz. Furthermore, Stoat tested 1661 most popular Google Play apps, and detected 2110 previously unknown and unique crashes. So far, 43 developers have responded that they are investigating our reports. 20 of reported crashes have been confirmed, and 8 already fixed.},
  eventtitle = {{{ESEC}}/{{FSE}}'17: {{Joint Meeting}} of the {{European Software Engineering Conference}} and the {{ACM SIGSOFT Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-5105-8},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/68DNX9TF/Su et al. - 2017 - Guided, stochastic model-based GUI testing of Andr.pdf}
}

@article{suRemoteKeyloggingAttacks,
  title = {Remote {{Keylogging Attacks}} in {{Multi-user VR Applications}}},
  author = {Su, Zihao and Cai, Kunlin and Beeler, Reuben and Dresel, Lukas and Garcia, Allan and Grishchenko, Ilya and Tian, Yuan and Kruegel, Christopher and Vigna, Giovanni},
  abstract = {As Virtual Reality (VR) applications grow in popularity, they have bridged distances and brought users closer together. However, with this growth, there have been increasing concerns about security and privacy, especially related to the motion data used to create immersive experiences. In this study, we highlight a significant security threat in multi-user VR applications, which are applications that allow multiple users to interact with each other in the same virtual space. Specifically, we propose a remote attack that utilizes the avatar rendering information collected from an adversary’s game clients to extract user-typed secrets like credit card information, passwords, or private conversations. We do this by (1) extracting motion data from network packets, and (2) mapping motion data to keystroke entries. We conducted a user study to verify the attack’s effectiveness, in which our attack successfully inferred 97.62\% of the keystrokes. Besides, we performed an additional experiment to underline that our attack is practical, confirming its effectiveness even when (1) there are multiple users in a room, and (2) the attacker cannot see the victims. Moreover, we replicated our proposed attack on four applications to demonstrate the generalizability of the attack. These results underscore the severity of the vulnerability and its potential impact on millions of VR social platform users.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/RGUVNX6W/Su 等 - Remote Keylogging Attacks in Multi-user VR Applica.pdf}
}

@article{suWhyMyApp2022,
  title = {Why {{My App Crashes}}? {{Understanding}} and {{Benchmarking Framework-Specific Exceptions}} of {{Android Apps}}},
  shorttitle = {Why {{My App Crashes}}?},
  author = {Su, Ting and Fan, Lingling and Chen, Sen and Liu, Yang and Xu, Lihua and Pu, Geguang and Su, Zhendong},
  date = {2022-04},
  journaltitle = {IEEE Transactions on Software Engineering},
  volume = {48},
  number = {4},
  pages = {1115--1137},
  issn = {1939-3520},
  doi = {10.1109/TSE.2020.3013438},
  abstract = {Mobile apps have become ubiquitous. Ensuring their correctness and reliability is important. However, many apps still suffer from occasional to frequent crashes, weakening their competitive edge. Large-scale, deep analyses of the characteristics of real-world app crashes can provide useful insights to both developers and researchers. However, such studies are difficult and yet to be carried out — this work fills this gap. We collected 16,245 and 8,760 unique exceptions from 2,486 open-source and 3,230 commercial Android apps, respectively, and observed that the exceptions thrown from Android framework (termed “framework-specific exceptions”) account for the majority. With one-year effort, we (1) extensively investigated these framework-specific exceptions, and (2) further conducted an online survey of 135 professional app developers about how they analyze, test, reproduce and fix these exceptions. Specifically, we aim to understand the framework-specific exceptions from several perspectives: (i) their characteristics (e.g., manifestation locations, fault taxonomy), (ii) the developers’ testing practices, (iii) existing bug detection techniques’ effectiveness, (iv) their reproducibility and (v) bug fixes. To enable follow-up research (e.g., bug understanding, detection, localization and repairing), we further systematically constructed, DroidDefects, the first comprehensive and largest benchmark of Android app exception bugs. This benchmark contains 33 reproducible exceptions (with test cases, stack traces, faulty and fixed app versions, bug types, etc.), and 3,696 ground-truth exceptions (real faults manifested by automated testing tools), which cover the apps with different complexities and diverse exception types. Based on our findings, we also built two prototype tools: Stoat+, an optimized dynamic testing tool, which quickly uncovered three previously-unknown, fixed crashes in Gmail and Google+; ExLocator, an exception localization tool, which can locate the root causes of specific exception types. Our dataset, benchmark and tools are publicly available on https://github.com/tingsu/droiddefects.},
  eventtitle = {{{IEEE Transactions}} on {{Software Engineering}}},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/T5CMSNPH/Su et al_2022_Why My App Crashes.pdf;/Users/feymanpaper/Zotero/storage/DFH6KAXS/9153947.html}
}

@inproceedings{tuncayDracoSystemUniform2016,
  title = {Draco: {{A System}} for {{Uniform}} and {{Fine-grained Access Control}} for {{Web Code}} on {{Android}}},
  shorttitle = {Draco},
  booktitle = {Proceedings of the 2016 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Tuncay, Guliz Seray and Demetriou, Soteris and Gunter, Carl A.},
  date = {2016-10-24},
  pages = {104--115},
  publisher = {ACM},
  location = {Vienna Austria},
  doi = {10.1145/2976749.2978322},
  url = {https://dl.acm.org/doi/10.1145/2976749.2978322},
  urldate = {2022-12-27},
  abstract = {In-app embedded browsers are commonly used by app developers to display web content without having to redirect the user to heavyweight web browsers. Just like the conventional web browsers, embedded browsers can allow the execution of web code. In addition, they provide mechanisms (viz., JavaScript bridges) to give web code access to internal app code that might implement critical functionalities and expose device resources. This is intrinsically dangerous since there is currently no means for app developers to perform origin-based access control on the JavaScript bridges, and any web code running in an embedded browser is free to use all the exposed app and device resources. Previous work that addresses this problem provided access control solutions that work only for apps that are built using hybrid frameworks. Additionally, these solutions focused on protecting only the parts of JavaScript bridges that expose permissions-protected resources. In this work, our goal is to provide a generic solution that works for all apps that utilize embedded web browsers and protects all channels that give access to internal app and device resources. Towards realizing this goal, we built Draco, a uniform and fine-grained access control framework for web code running on Android embedded browsers (viz., WebView). Draco provides a declarative policy language that allows developers to define policies to specify the desired access characteristics of web origins in a fine-grained fashion, and a runtime system that dynamically enforces the policies. In contrast with previous work, we do not assume any modifications to the Android operating system, and implement Draco in the Chromium Android System WebView app to enable seamless deployment. Our evaluation of the the Draco runtime system shows that Draco incurs negligible overhead, which is in the order of microseconds.},
  eventtitle = {{{CCS}}'16: 2016 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-4139-4},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/WHMMRXF6/Tuncay 等 - 2016 - Draco A System for Uniform and Fine-grained Acces.pdf}
}

@article{UnderstandingAnalyzingMobile2017,
  title = {Understanding and {{Analyzing Mobile Apps}} with {{LLM-powered Page Semantic Graphs}}},
  date = {2017},
  abstract = {With the rapidly developing and evolving of mobile apps, precisely understanding and analyzing both the user interfaces (UI) and code of these apps becomes increasingly challenging. Existing methods often focus on either UI or code, lacking a comprehensive representation approach that provides a unified view of both UI and code of the apps. This paper introduces an innovative approach, employing Large Language Models (LLMs) to power the construction of Page Semantic Graphs (PSGs) for mobile apps. PSGs are designed to capture the semantic essence of both the UI and underlying code of mobile apps, thereby offering a chance of comprehensively understanding the apps’ intentions and behaviors.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/GGNBGJ3Q/2017 - Understanding and Analyzing Mobile Apps with LLM-p.pdf}
}

@article{UnderstandingDetectingSneaky2018,
  title = {Understanding and {{Detecting Sneaky Pop-Up Windows}} in the {{Mobile Ecosystem}}},
  date = {2018},
  abstract = {In mobile applications, Pop-up window (PoW) plays a crucial role in improving user experience, guiding user actions, and delivering key information. Unfortunately, the excessive use of PoWs severely degrades the user experience. These PoWs often sneakily mislead users in their choices, employing tactics that subtly manipulate decision-making processes. In this paper, we provide the first indepth study on the Sneaky PoWs in the mobile ecosystem. Our research identified four distinct Sneaky patterns that compromise user experience: text mislead, UI mislead, forced action, and privacy settings enabled by default. To further evaluate the impact of such Sneaky PoWs at large, we developed an automated analysis pipeline called Poker, to tackle the challenges of identifying, dismissing, and collecting diverse PoWs in real-world apps. Evaluation results showed that Poker achieves high precision and recall in detecting PoWs, efficiently dismissed over 88\% of PoWs with minimal user interaction, with good robustness and reliability in comprehensive app exploration. Further, our systematic analysis over the top 100 popular apps in China and U.S. revealing that both regions displayed significant ratios of Sneaky PoWs, particularly in promotional contexts, with high occurrences in categories such as shopping and video apps. Notably, PoWs frequently manifested as ’Back Blocker’ and ’Sudden’ types, which significantly impacted user navigation and experience. The findings highlight the strategic deployment of Sneaky tactics that compromise user trust and ethical app design.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/ZQCDIJVH/2018 - Understanding and Detecting Sneaky Pop-Up Windows .pdf}
}

@inproceedings{wangComboDroidGeneratingHighquality2020,
  title = {{{ComboDroid}}: Generating High-Quality Test Inputs for {{Android}} Apps via Use Case Combinations},
  shorttitle = {{{ComboDroid}}},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 42nd {{International Conference}} on {{Software Engineering}}},
  author = {Wang, Jue and Jiang, Yanyan and Xu, Chang and Cao, Chun and Ma, Xiaoxing and Lu, Jian},
  year = {10 月 1, 2020},
  series = {{{ICSE}} '20},
  pages = {469--480},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3377811.3380382},
  url = {https://dl.acm.org/doi/10.1145/3377811.3380382},
  urldate = {2023-06-02},
  abstract = {Android apps demand high-quality test inputs, whose generation remains an open challenge. Existing techniques fall short on exploring complex app functionalities reachable only by a long, meaningful, and effective test input. Observing that such test inputs can usually be decomposed into relatively independent short use cases, this paper presents ComboDroid, a fundamentally different Android app testing framework. ComboDroid obtains use cases for manifesting a specific app functionality (either manually provided or automatically extracted), and systematically enumerates the combinations of use cases, yielding high-quality test inputs. The evaluation results of ComboDroid on real-world apps are encouraging. Our fully automatic variant outperformed the best existing technique APE by covering 4.6\% more code (APE only outperformed Monkey by 2.1\%), and revealed four previously unknown bugs in extensively tested subjects. Our semi-automatic variant boosts the manual use cases obtained with little manual labor, achieving a comparable coverage (only 3.2\% less) with a white-box human testing expert.},
  isbn = {978-1-4503-7121-6},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/2DU73U27/Wang et al_2020_ComboDroid.pdf}
}

@inproceedings{wangVetIdentifyingAvoiding2021,
  title = {Vet: Identifying and Avoiding {{UI}} Exploration Tarpits},
  shorttitle = {Vet},
  booktitle = {Proceedings of the 29th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Wang, Wenyu and Yang, Wei and Xu, Tianyin and Xie, Tao},
  date = {2021-08-20},
  pages = {83--94},
  publisher = {ACM},
  location = {Athens Greece},
  doi = {10.1145/3468264.3468554},
  url = {https://dl.acm.org/doi/10.1145/3468264.3468554},
  urldate = {2023-06-05},
  abstract = {Despite over a decade of research, it is still challenging for mobile UI testing tools to achieve satisfactory effectiveness, especially on industrial apps with rich features and large code bases. Our experiences suggest that existing mobile UI testing tools are prone to exploration tarpits, where the tools get stuck with a small fraction of app functionalities for an extensive amount of time. For example, a tool logs out an app at early stages without being able to log back in, and since then the tool gets stuck with exploring the app’s pre-login functionalities (i.e., exploration tarpits) instead of its main functionalities. While tool vendors/users can manually hardcode rules for the tools to avoid specific exploration tarpits, these rules can hardly generalize, being fragile in face of diverted testing environments, fast app iterations, and the demand of batch testing product lines. To identify and resolve exploration tarpits, we propose Vet, a general approach including a supporting system for the given specific Android UI testing tool on the given specific app under test (AUT). Vet runs the tool on the AUT for some time and records UI traces, based on which Vet identifies exploration tarpits by recognizing their patterns in the UI traces. Vet then pinpoints the actions (e.g., clicking logout) or the screens that lead to or exhibit exploration tarpits. In subsequent test runs, Vet guides the testing tool to prevent or recover from exploration tarpits. From our evaluation with state-of-the-art Android UI testing tools on popular industrial apps, Vet identifies exploration tarpits that cost up to 98.6\% testing time budget. These exploration tarpits reveal not only limitations in UI exploration strategies but also defects in tool implementations. Vet automatically addresses the identified exploration tarpits, enabling each evaluated tool to achieve higher code coverage and improve crash-triggering capabilities.},
  eventtitle = {{{ESEC}}/{{FSE}} '21: 29th {{ACM Joint European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  isbn = {978-1-4503-8562-6},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/N75HP3GW/Wang et al. - 2021 - Vet identifying and avoiding UI exploration tarpi.pdf}
}

@inproceedings{wuLeakingPrivacyGroups2024,
  title = {Leaking the {{Privacy}} of {{Groups}} and {{More}}: {{Understanding Privacy Risks}} of {{Cross-App Content Sharing}} in {{Mobile Ecosystem}}},
  shorttitle = {Leaking the {{Privacy}} of {{Groups}} and {{More}}},
  booktitle = {Proceedings 2024 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Wu, Jiangrong and Nan, Yuhong and Xing, Luyi and Cheng, Jiatao and Lin, Zimin and Zheng, Zibin and Yang, Min},
  date = {2024},
  publisher = {Internet Society},
  location = {San Diego, CA, USA},
  doi = {10.14722/ndss.2024.24138},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2024-138-paper.pdf},
  urldate = {2024-05-24},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-93-8},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/9HB3CXYR/Wu et al. - 2024 - Leaking the Privacy of Groups and More Understand.pdf}
}

@inproceedings{xiaoIconIntentAutomaticIdentification2019,
  title = {{{IconIntent}}: {{Automatic Identification}} of {{Sensitive UI Widgets Based}} on {{Icon Classification}} for {{Android Apps}}},
  shorttitle = {{{IconIntent}}},
  booktitle = {2019 {{IEEE}}/{{ACM}} 41st {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Xiao, Xusheng and Wang, Xiaoyin and Cao, Zhihao and Wang, Hanlin and Gao, Peng},
  date = {2019-05},
  pages = {257--268},
  publisher = {IEEE},
  location = {Montreal, QC, Canada},
  doi = {10.1109/ICSE.2019.00041},
  url = {https://ieeexplore.ieee.org/document/8812108/},
  urldate = {2023-05-12},
  abstract = {Many mobile applications (i.e., apps) include UI widgets to use or collect users’ sensitive data. Thus, to identify suspicious sensitive data usage such as UI-permission mismatch, it is crucial to understand the intentions of UI widgets. However, many UI widgets leverage icons of specific shapes (object icons) and icons embedded with text (text icons) to express their intentions, posing challenges for existing detection techniques that analyze only textual data to identify sensitive UI widgets. In this work, we propose a novel app analysis framework, ICONINTENT, that synergistically combines program analysis and icon classification to identify sensitive UI widgets in Android apps. ICONINTENT automatically associates UI widgets and icons via static analysis on app’s UI layout files and code, and then adapts computer vision techniques to classify the associated icons into eight categories of sensitive data. Our evaluations of ICONINTENT on 150 apps from Google Play show that ICONINTENT can detect 248 sensitive UI widgets in 97 apps, achieving a precision of 82.4\%. When combined with SUPOR, the state-of-the-art sensitive UI widget identification technique based on text analysis, SUPOR +ICONINTENT can detect 487 sensitive UI widgets (101.2\% improvement over SUPOR only), and reduces suspicious permissions to be inspected by 50.7\% (129.4\% improvement over SUPOR only).},
  eventtitle = {2019 {{IEEE}}/{{ACM}} 41st {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  isbn = {978-1-72810-869-8},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/58LFBZ9P/Xiao et al. - 2019 - IconIntent Automatic Identification of Sensitive .pdf}
}

@inproceedings{xiaoUnderstandingMitigatingRemote2022,
  title = {Understanding and {{Mitigating Remote Code Execution Vulnerabilities}} in {{Cross-platform Ecosystem}}},
  booktitle = {Proceedings of the 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Xiao, Feng and Yang, Zheng and Allen, Joey and Yang, Guangliang and Williams, Grant and Lee, Wenke},
  date = {2022-11-07},
  pages = {2975--2988},
  publisher = {ACM},
  location = {Los Angeles CA USA},
  doi = {10.1145/3548606.3559340},
  url = {https://dl.acm.org/doi/10.1145/3548606.3559340},
  urldate = {2023-02-21},
  abstract = {JavaScript cross-platform frameworks are becoming increasingly popular. They help developers easily and conveniently build crossplatform applications while just needing only one JavaScript codebase. Recent security reports showed several high-profile crossplatform applications (e.g., Slack, Microsoft Teams, and Github Atom) suffered injection issues, which were often introduced by Cross-site Scripting (XSS) or embedded untrusted remote content like ads. These injections open security holes for remote web attackers, and cause serious security risks, such as allowing injected malicious code to run arbitrary local executables in victim devices (referred to as “Xrce” attacks). However, until now, Xrce vectors and behaviors and the root cause of Xrce were rarely studied and understood. Although the cross-platform framework developers and community responded quickly by offering multiple security features and suggestions, these mitigations were empirically proposed with unknown effectiveness. In this paper, we conduct the first systematic study of the Xrce vulnerability class in the cross-platform ecosystem. We first build a generic model for different cross-platform applications to reduce their semantic and behavioral gaps. We use this model to (1) study Xrce by comprehensively defining its attack scenarios, surfaces, and behaviors, (2) investigate and study the state-of-theart defenses, and verify their weakness against Xrce attacks. Our study on 640 real-world cross-platform applications shows, despite the availability of existing defenses, Xrce widely affects the crossplatform ecosystem. 75\% of applications may be impacted by Xrce, including Microsoft Teams. (3) Finally, we propose XGuard, a novel defense technology to automatically mitigate all Xrce variants derived from our concluded Xrce behaviors.},
  eventtitle = {{{CCS}} '22: 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-9450-5},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/3548606.3559340.pdf}
}

@inproceedings{xiongEmpiricalStudyFunctional2023,
  title = {An {{Empirical Study}} of {{Functional Bugs}} in {{Android Apps}}},
  booktitle = {Proceedings of the 32nd {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Xiong, Yiheng and Xu, Mengqian and Su, Ting and Sun, Jingling and Wang, Jue and Wen, He and Pu, Geguang and He, Jifeng and Su, Zhendong},
  date = {2023-07-12},
  pages = {1319--1331},
  publisher = {ACM},
  location = {Seattle WA USA},
  doi = {10.1145/3597926.3598138},
  url = {https://dl.acm.org/doi/10.1145/3597926.3598138},
  urldate = {2024-05-14},
  eventtitle = {{{ISSTA}} '23: 32nd {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {9798400702211},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/DHQ2PBFH/Xiong et al_2023_An Empirical Study of Functional Bugs in Android Apps.pdf}
}

@inproceedings{xuGUIDERGUIStructure2021,
  title = {{{GUIDER}}: {{GUI}} Structure and Vision Co-Guided Test Script Repair for {{Android}} Apps},
  shorttitle = {{{GUIDER}}},
  booktitle = {Proceedings of the 30th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Xu, Tongtong and Pan, Minxue and Pei, Yu and Li, Guiyin and Zeng, Xia and Zhang, Tian and Deng, Yuetang and Li, Xuandong},
  date = {2021-07-11},
  pages = {191--203},
  publisher = {ACM},
  location = {Virtual Denmark},
  doi = {10.1145/3460319.3464830},
  url = {https://dl.acm.org/doi/10.1145/3460319.3464830},
  urldate = {2023-06-04},
  eventtitle = {{{ISSTA}} '21: 30th {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-4503-8459-9},
  langid = {english},
  keywords = {AndroidRepair,AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/JUVKFDAR/Xu et al_2021_GUIDER.pdf}
}

@inproceedings{yangAutomatedGenerationEventOriented2018,
  title = {Automated {{Generation}} of {{Event-Oriented Exploits}} in {{Android Hybrid Apps}}},
  booktitle = {Proceedings 2018 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Yang, Guangliang and Huang, Jeff and Gu, Guofei},
  date = {2018},
  publisher = {Internet Society},
  location = {San Diego, CA},
  doi = {10.14722/ndss.2018.23236},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2018/02/ndss2018_04B-3_Yang_paper.pdf},
  urldate = {2023-02-21},
  abstract = {Recently more and more Android apps integrate the embedded browser, known as “WebView”, to render web pages and run JavaScript code without leaving these apps. WebView provides a powerful feature that allows event handlers defined in the native context (i.e., Java in Android) to handle web events that occur in WebView. However, as shown in prior work, this feature suffers from remote attacks, which we generalize as EventOriented Exploit (EOE) in this paper, such that adversaries may remotely access local critical functionalities through event handlers in WebView without any permission or authentication. In this paper, we propose a novel approach, EOEDroid, which can automatically vet event handlers in a given hybrid app using selective symbolic execution and static analysis. If a vulnerability is found, EOEDroid also automatically generates exploit code to help developers and analysts verify the vulnerability. To support exploit code generation, we also systematically study web events, event handlers and their trigger constraints. We evaluated our approach on 3,652 most popular apps. The result showed that our approach found 97 total vulnerabilities in 58 apps, including 2 cross-frame DOM manipulation, 53 phishing, 30 sensitive information leakage, 1 local resources access, and 11 Intent abuse vulnerabilities. We also found a potential backdoor in a high profile app that could be used to steal users’ sensitive information, such as IMEI. Even though developers attempted to close it, EOEDroid found that adversaries were still able to exploit it by triggering two events together and feeding event handlers with well designed input.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-49-5},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/EOEDroid_NDSS18.pdf}
}

@article{yangCanVirtualReality,
  title = {Can {{Virtual Reality Protect Users}} from {{Keystroke Inference Attacks}}?},
  author = {Yang, Zhuolin and Bhaskar, Ronik and Sarwar, Zain and Zhao, Ben Y and Hwang, Iris and Zheng, Haitao},
  abstract = {Virtual Reality (VR) has gained popularity by providing immersive and interactive experiences without geographical limitations. It also provides a sense of personal privacy through physical separation. In this paper, we show that despite assumptions of enhanced privacy, VR is unable to shield its users from side-channel attacks that steal private information. Ironically, this vulnerability arises from VR’s greatest strength, its immersive and interactive nature. We demonstrate this by designing and implementing a new set of keystroke inference attacks in shared virtual environments, where an attacker (VR user) can recover the content typed by another VR user by observing their avatar. While the avatar displays noisy telemetry of the user’s hand motion, an intelligent attacker can use that data to recognize typed keys and reconstruct typed content, without knowing the keyboard layout or gathering labeled data. We evaluate the proposed attacks using IRB-approved user studies across multiple VR scenarios. For 13 out of 15 tested users, our attacks accurately recognize 86\%-98\% of typed keys, and the recovered content retains up to 98\% of the meaning of the original typed content. We also discuss potential defenses.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/YHNDNYZ5/Yang 等 - Can Virtual Reality Protect Users from Keystroke I.pdf}
}

@inproceedings{yangCrossMiniappRequest2022,
  title = {Cross {{Miniapp Request Forgery}}: {{Root Causes}}, {{Attacks}}, and {{Vulnerability Detection}}},
  shorttitle = {Cross {{Miniapp Request Forgery}}},
  booktitle = {Proceedings of the 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  author = {Yang, Yuqing and Zhang, Yue and Lin, Zhiqiang},
  date = {2022-11-07},
  pages = {3079--3092},
  publisher = {ACM},
  location = {Los Angeles CA USA},
  doi = {10.1145/3548606.3560597},
  url = {https://dl.acm.org/doi/10.1145/3548606.3560597},
  urldate = {2022-12-27},
  abstract = {A miniapp is a full-fledged app that is executed inside a mobile super app such as WeChat or SnapChat. Being mini by nature, it often has to communicate with other miniapps to accomplish complicated tasks. However, unlike a web app that uses network domains (i.e., IP addresses) to navigate between different web apps, a miniapp uses a unique global appId assigned by the super app to navigate between miniapps. Unfortunately, any missing checks of the sender’s appId in a receiver miniapp can lead to a new type of attacks we name it cross-miniapp request forgery (CMRF). In addition to demystifying the root cause of this attack (i.e., the essence of the vulnerability), this paper also seeks to measure the popularity of this vulnerability among miniapps by developing CmrfScanner, which is able to statically detect the CMRF-vulnerability based on the abstract syntax tree of miniapp code to determine whether there are any missing checks of the appIds. We have tested CmrfScanner with 2,571,490 WeChat miniapps and 148,512 Baidu miniapps, and identified 52,394 (2.04\%) WeChat miniapps and 494 (0.33\%) Baidu miniapps that involve cross-communication. Among them, CmrfScanner further identified that 50,281 (95.97\%) of WeChat miniapps, and 493 (99.80\%) of Baidu miniapps lack the appID checks of the sender’s mini-apps, indicating that a large amount of miniapp developers are not aware of this attack. We also estimated the impact of this vulnerability and found 55.05\% of the lack of validation WeChat miniapps (7.09\% of such Baidu miniapps) can have direct security consequences such as privileged data access, information leakage, promotion abuse, and even shopping for free. We hope that our findings can raise awareness among miniapp developers, and future miniapps will not be subject to CMRF attacks.},
  eventtitle = {{{CCS}} '22: 2022 {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-9450-5},
  langid = {english},
  keywords = {app_in_app},
  file = {/Users/feymanpaper/Zotero/storage/J7E335YS/Yang 等 - 2022 - Cross Miniapp Request Forgery Root Causes, Attack.pdf}
}

@article{yangIframesPopupsAre,
  title = {Iframes/{{Popups Are Dangerous}} in {{Mobile WebView}}: {{Studying}} and {{Mitigating Differential Context Vulnerabilities}}},
  author = {Yang, GuangLiang and Huang, Jeff and Gu, Guofei},
  abstract = {In this paper, we present a novel class of Android WebView vulnerabilities (called Differential Context Vulnerabilities or DCVs) associated with web iframe/popup behaviors. To demonstrate the security implications of DCVs, we devise several novel concrete attacks. We show an untrusted web iframe/popup inside WebView becomes dangerous that it can launch these attacks to open holes on existing defense solutions, and obtain risky privileges and abilities, such as breaking web messaging integrity, stealthily accessing sensitive mobile functionalities, and performing phishing attacks. Then, we study and assess the security impacts of DCVs on real-world apps. For this purpose, we develop a novel technique, DCV-Hunter, that can automatically vet Android apps against DCVs. By applying DCV-Hunter on a large number of most popular apps, we find DCVs are prevalent. Many highprofile apps are verified to be impacted, such as Facebook, Instagram, Facebook Messenger, Google News, Skype, Uber, Yelp, and U.S. Bank. To mitigate DCVs, we design a multilevel solution that enhances the security of WebView. Our evaluation on real-world apps shows the mitigation solution is effective and scalable, with negligible overhead.},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/389HE7ZF/Yang 等 - IframesPopups Are Dangerous in Mobile WebView St.pdf}
}

@inproceedings{yangPermDroidAutomaticallyTesting2022,
  title = {{{PermDroid}}: Automatically Testing Permission-Related Behaviour of {{Android}} Applications},
  shorttitle = {{{PermDroid}}},
  booktitle = {Proceedings of the 31st {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Yang, Shuaihao and Zeng, Zigang and Song, Wei},
  date = {2022-07-18},
  pages = {593--604},
  publisher = {ACM},
  location = {Virtual South Korea},
  doi = {10.1145/3533767.3534221},
  url = {https://dl.acm.org/doi/10.1145/3533767.3534221},
  urldate = {2023-06-04},
  eventtitle = {{{ISSTA}} '22: 31st {{ACM SIGSOFT International Symposium}} on {{Software Testing}} and {{Analysis}}},
  isbn = {978-1-4503-9379-9},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/7X5DFP3G/Yang et al_2022_PermDroid.pdf}
}

@incollection{yangPreciselyScalablyVetting2017,
  title = {Precisely and {{Scalably Vetting JavaScript Bridge}} in {{Android Hybrid Apps}}},
  booktitle = {Research in {{Attacks}}, {{Intrusions}}, and {{Defenses}}},
  author = {Yang, Guangliang and Mendoza, Abner and Zhang, Jialong and Gu, Guofei},
  editor = {Dacier, Marc and Bailey, Michael and Polychronakis, Michalis and Antonakakis, Manos},
  date = {2017},
  volume = {10453},
  pages = {143--166},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-66332-6_7},
  url = {http://link.springer.com/10.1007/978-3-319-66332-6_7},
  urldate = {2023-02-21},
  abstract = {In this paper, we propose a novel system, named BridgeScope, for precise and scalable vetting of JavaScript Bridge security issues in Android hybrid apps. BridgeScope is flexible and can be leveraged to analyze a diverse set of WebView implementations, such as Android’s default WebView, and Mozilla’s Rhino-based WebView. Furthermore, BridgeScope can automatically generate test exploit code to further confirm any discovered JavaScript Bridge vulnerability. We evaluated BridgeScope to demonstrate that it is precise and effective in finding JavaScript Bridge vulnerabilities. On average, it can vet an app within seven seconds with a low false positive rate. A large scale evaluation identified hundreds of potentially vulnerable real-world popular apps that could lead to critical exploitation. Furthermore, we also demonstrate that BridgeScope can discover malicious functionalities that leverage JavaScript Bridge in real-world malicious apps, even when the associated malicious severs were unavailable.},
  isbn = {978-3-319-66331-9 978-3-319-66332-6},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/BridgeScope_RAID17_update.pdf}
}

@inproceedings{yangStaticWindowTransition2015,
  title = {Static {{Window Transition Graphs}} for {{Android}} ({{T}})},
  booktitle = {2015 30th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  author = {Yang, Shengqian and Zhang, Hailong and Wu, Haowei and Wang, Yan and Yan, Dacong and Rountev, Atanas},
  date = {2015-01},
  pages = {658--668},
  doi = {10.1109/ASE.2015.76},
  abstract = {This work develops a static analysis to create a model of the behavior of an Android application's GUI. We propose the window transition graph (WTG), a model representing the possible GUI window sequences and their associated events and callbacks. A key component and contribution of our work is the careful modeling of the stack of currently-active windows, the changes to this stack, and the effects of callbacks related to these changes. To the best of our knowledge, this is the first detailed study of this important static analysis problem for Android. We develop novel analysis algorithms for WTG construction and traversal, based on this modeling of the window stack. We also describe an application of the WTG for GUI test generation, using path traversals. The evaluation of the proposed algorithms indicates their effectiveness and practicality.},
  eventtitle = {2015 30th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}} ({{ASE}})},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/PKQ5CSCM/Yang et al_2015_Static Window Transition Graphs for Android (T).pdf;/Users/feymanpaper/Zotero/storage/5R8CCCUU/7372053.html}
}

@inproceedings{yangStudyMitigationOrigin2018,
  title = {Study and {{Mitigation}} of {{Origin Stripping Vulnerabilities}} in {{Hybrid-postMessage Enabled Mobile Applications}}},
  booktitle = {2018 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  author = {Yang, Guangliang and Huang, Jeff and Gu, Guofei and Mendoza, Abner},
  date = {2018-05},
  pages = {742--755},
  publisher = {IEEE},
  location = {San Francisco, CA},
  doi = {10.1109/SP.2018.00043},
  url = {https://ieeexplore.ieee.org/document/8418635/},
  urldate = {2023-02-21},
  eventtitle = {2018 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  isbn = {978-1-5386-4353-2},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/gosec/qrcodeAttack/paper/10065081.pdf}
}

@inproceedings{yanMUIDDetectingSensitive2023,
  title = {{{MUID}}: {{Detecting Sensitive User Inputs}} in {{Miniapp Ecosystems}}},
  shorttitle = {{{MUID}}},
  booktitle = {Proceedings of the 2023 {{ACM Workshop}} on {{Secure}} and {{Trustworthy Superapps}}},
  author = {Yan, Ziqiang and Fan, Ming and Wang, Yin and Shi, Jifei and Wang, Haoran and Liu, Ting},
  date = {2023-11-26},
  pages = {17--21},
  publisher = {ACM},
  location = {Copenhagen Denmark},
  doi = {10.1145/3605762.3624429},
  url = {https://dl.acm.org/doi/10.1145/3605762.3624429},
  urldate = {2023-12-13},
  abstract = {In recent years, the rise of miniapps, lightweight applications based on WebView, has become a prominent trend in mobile app development. This trend has rapidly expanded on popular social platforms like WeChat, TikTok, Grab, and even Snapchat. In these miniapps, user data is pivotal for providing personalized services and improving user experience. However, there are still shortcomings in identifying the source of sensitive data in miniapps. This paper introduces MUID, an innovative method for detecting user input data in miniapps. MUID integrates an engine that can dynamically test miniapps to overcome the challenges in WebView page extraction, uses a hybrid analysis approach to identify sensitive components, and infers the type of information collected based on contextual hint words. In the evaluation of MUID across 30 popular miniapps randomly selected on WeChat, we demonstrated its high dynamic testing efficiency and its capability to recognize components with a recall rate of 95.74\% and a precision rate of 81.32\%. The overall precision of MUID is 78.31\%, and the recall rate is 92.19\%, demonstrating the effectiveness of MUID in conducting security and privacy analyses.},
  eventtitle = {{{CCS}} '23: {{ACM SIGSAC Conference}} on {{Computer}} and {{Communications Security}}},
  isbn = {9798400702587},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/6NBENVLB/Yan et al. - 2023 - MUID Detecting Sensitive User Inputs in Miniapp E.pdf}
}

@inproceedings{yanMultipleentryTestingAndroid2020,
  title = {Multiple-Entry Testing of {{Android}} Applications by Constructing Activity Launching Contexts},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 42nd {{International Conference}} on {{Software Engineering}}},
  author = {Yan, Jiwei and Liu, Hao and Pan, Linjie and Yan, Jun and Zhang, Jian and Liang, Bin},
  date = {2020-06-27},
  pages = {457--468},
  publisher = {ACM},
  location = {Seoul South Korea},
  doi = {10.1145/3377811.3380347},
  url = {https://dl.acm.org/doi/10.1145/3377811.3380347},
  urldate = {2023-06-02},
  eventtitle = {{{ICSE}} '20: 42nd {{International Conference}} on {{Software Engineering}}},
  isbn = {978-1-4503-7121-6},
  langid = {english},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/VNN2M6ZW/Yan et al_2020_Multiple-entry testing of Android applications by constructing activity.pdf}
}

@article{zahariaResilientDistributedDatasets,
  title = {Resilient {{Distributed Datasets}}: {{A Fault-Tolerant Abstraction}} for {{In-Memory Cluster Computing}}},
  author = {Zaharia, Matei and Chowdhury, Mosharaf and Das, Tathagata and Dave, Ankur and Ma, Justin and McCauley, Murphy and Franklin, Michael J and Shenker, Scott and Stoica, Ion},
  abstract = {We present Resilient Distributed Datasets (RDDs), a distributed memory abstraction that lets programmers perform in-memory computations on large clusters in a fault-tolerant manner. RDDs are motivated by two types of applications that current computing frameworks handle inefficiently: iterative algorithms and interactive data mining tools. In both cases, keeping data in memory can improve performance by an order of magnitude. To achieve fault tolerance efficiently, RDDs provide a restricted form of shared memory, based on coarsegrained transformations rather than fine-grained updates to shared state. However, we show that RDDs are expressive enough to capture a wide class of computations, including recent specialized programming models for iterative jobs, such as Pregel, and new applications that these models do not capture. We have implemented RDDs in a system called Spark, which we evaluate through a variety of user applications and benchmarks.},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/SDZFCKSI/Zaharia et al. - Resilient Distributed Datasets A Fault-Tolerant A.pdf}
}

@inproceedings{zengAutomatedTestInput2016,
  title = {Automated Test Input Generation for {{Android}}: Are We Really There yet in an Industrial Case?},
  shorttitle = {Automated Test Input Generation for {{Android}}},
  booktitle = {Proceedings of the 2016 24th {{ACM SIGSOFT International Symposium}} on {{Foundations}} of {{Software Engineering}}},
  author = {Zeng, Xia and Li, Dengfeng and Zheng, Wujie and Xia, Fan and Deng, Yuetang and Lam, Wing and Yang, Wei and Xie, Tao},
  year = {11 月 1, 2016},
  series = {{{FSE}} 2016},
  pages = {987--992},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2950290.2983958},
  url = {https://dl.acm.org/doi/10.1145/2950290.2983958},
  urldate = {2023-06-02},
  abstract = {Given the ever increasing number of research tools to automatically generate inputs to test Android applications (or simply apps), researchers recently asked the question "Are we there yet?" (in terms of the practicality of the tools). By conducting an empirical study of the various tools, the researchers found that Monkey (the most widely used tool of this category in industrial practices) outperformed all of the research tools that they studied. In this paper, we present two significant extensions of that study. First, we conduct the first industrial case study of applying Monkey against WeChat, a popular messenger app with over 762 million monthly active users, and report the empirical findings on Monkey's limitations in an industrial setting. Second, we develop a new approach to address major limitations of Monkey and accomplish substantial code-coverage improvements over Monkey, along with empirical insights for future enhancements to both Monkey and our approach.},
  isbn = {978-1-4503-4218-6},
  keywords = {AndroidTesting},
  file = {/Users/feymanpaper/Zotero/storage/QMWTAQYF/Zeng et al_2016_Automated test input generation for Android.pdf}
}

@inproceedings{zhaHazardIntegratedUnderstanding2022,
  title = {Hazard {{Integrated}}: {{Understanding Security Risks}} in {{App Extensions}} to {{Team Chat Systems}}},
  shorttitle = {Hazard {{Integrated}}},
  booktitle = {Proceedings 2022 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Zha, Mingming and Wang, Jice and Nan, Yuhong and Wang, Xiaofeng and Zhang, Yuqing and Yang, Zelin},
  date = {2022},
  publisher = {Internet Society},
  location = {San Diego, CA, USA},
  doi = {10.14722/ndss.2022.24387},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2022-387-paper.pdf},
  urldate = {2022-12-27},
  abstract = {Team Chat (TACT) systems are now widely used for online collaborations and project management. A unique feature of these systems is their integration of third-party apps, which extends their capabilities but also brings in the complexity that could potentially put the TACT system and its end-users at risk. In this paper, for the first time, we demonstrate that thirdparty apps in TACT systems indeed open the door to new security risks, such as privilege escalation, deception, and privacy leakage. We studied 12 popular TACT systems, following the key steps of a third-party app’s life cycle (its installation, update, configuration, and runtime operations). Notably, we designed and implemented a pipeline for efficiently identifying the security risks of TA APIs, a core feature provided for system-app communication.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-74-7},
  langid = {english},
  keywords = {app_in_app},
  file = {/Users/feymanpaper/Zotero/storage/EYMZ98KT/Zha 等 - 2022 - Hazard Integrated Understanding Security Risks in.pdf}
}

@article{zhangEmpiricalStudyWeb,
  title = {An {{Empirical Study}} of {{Web Resource Manipulation}} in {{Real-world Mobile Applications}}},
  author = {Zhang, Xiaohan and Zhang, Yuan and Mo, Qianqian and Xia, Hao and Yang, Zhemin and Yang, Min and Wang, Xiaofeng and Lu, Long and Duan, Haixin},
  abstract = {Mobile apps have become the main channel for accessing Web services. Both Android and iOS feature inapp Web browsers that support convenient Web service integration through a set of Web resource manipulation APIs. Previous work have revealed the attack surfaces of Web resource manipulation APIs and proposed several defense mechanisms. However, none of them provides evidence that such attacks indeed happen in the real world, measures their impacts, and evaluates the proposed defensive techniques against real attacks.},
  langid = {english},
  keywords = {webview},
  file = {/Users/feymanpaper/Zotero/storage/SUNFVWWQ/Zhang 等 - An Empirical Study of Web Resource Manipulation in.pdf}
}

@article{zhangIdentityConfusionWebViewbased,
  title = {Identity {{Confusion}} in {{WebView-based Mobile App-in-app Ecosystems}}},
  author = {Zhang, Lei and Zhang, Zhibo and Liu, Ancong and Cao, Yinzhi and Zhang, Xiaohan and Chen, Yanjun and Zhang, Yuan and Yang, Guangliang and Yang, Min},
  abstract = {Mobile applications (apps) often delegate their own functions to other parties, which makes them become a super ecosystem hosting these parties. Therefore, such mobile apps are being called super-apps, and the delegated parties are subsequently called sub-apps, behaving like “app-in-app”. Sub-apps not only load (third-party) resources like a normal app, but also have access to the privileged APIs provided by the super-app. This leads to an important research question—determining who can access these privileged APIs. Real-world super-apps, according to our study, adopt three types of identities—namely web domains, sub-app IDs, and capabilities—to determine privileged API access. However, existing identity checks of these three types are often not well designed, leading to a disobey of the least privilege principle. That is, the granted recipient of a privileged API is broader than intended, thus defined as an “identity confusion” in this paper. To the best of our knowledge, no prior works have studied this type of identity confusion vulnerability.},
  langid = {english},
  keywords = {app_in_app,webview},
  file = {/Users/feymanpaper/Zotero/storage/HQBTJRHS/Zhang 等 - Identity Confusion in WebView-based Mobile App-in-.pdf}
}

@online{zhangLLMbasedAbstractionConcretization2024,
  title = {{{LLM-based Abstraction}} and {{Concretization}} for {{GUI Test Migration}}},
  author = {Zhang, Yakun and Liu, Chen and Xie, Xiaofei and Lin, Yun and Dong, Jin Song and Hao, Dan and Zhang, Lu},
  date = {2024-09-08},
  eprint = {2409.05028},
  eprinttype = {arXiv},
  doi = {10.48550/arXiv.2409.05028},
  url = {http://arxiv.org/abs/2409.05028},
  urldate = {2024-10-22},
  abstract = {GUI test migration aims to produce test cases with events and assertions to test specific functionalities of a target app. Existing migration approaches typically focus on the widget-mapping paradigm that maps widgets from source apps to target apps. However, since different apps may implement the same functionality in different ways, direct mapping may result in incomplete or buggy test cases, thus significantly impacting the effectiveness of testing target functionality and the practical applicability. In this paper, we propose a new migration paradigm (i.e., abstraction-concretization paradigm) that first abstracts the test logic for the target functionality and then utilizes this logic to generate the concrete GUI test case. Furthermore, we introduce MACdroid, the first approach that migrates GUI test cases based on this paradigm. Specifically, we propose an abstraction technique that utilizes source test cases from source apps targeting the same functionality to extract a general test logic for that functionality. Then, we propose a concretization technique that utilizes the general test logic to guide an LLM in generating the corresponding GUI test case (including events and assertions) for the target app. We evaluate MACdroid on two widely-used datasets (including 31 apps, 34 functionalities, and 123 test cases). On the FrUITeR dataset, the test cases generated by MACdroid successfully test 64\% of the target functionalities, improving the baselines by 191\%. On the Lin dataset, MACdroid successfully tests 75\% of the target functionalities, outperforming the baselines by 42\%. These results underscore the effectiveness of MACdroid in GUI test migration.},
  pubstate = {prepublished},
  keywords = {Computer Science - Computation and Language,Computer Science - Software Engineering},
  file = {/Users/feymanpaper/Zotero/storage/2HL5J5E6/Zhang et al_2024_LLM-based Abstraction and Concretization for GUI Test Migration.pdf;/Users/feymanpaper/Zotero/storage/4LT6A8W5/2409.html}
}

@inproceedings{zhaoGeolocatingDriversStudy2019,
  title = {Geo-Locating {{Drivers}}: {{A Study}} of {{Sensitive Data Leakage}} in {{Ride-Hailing Services}}},
  shorttitle = {Geo-Locating {{Drivers}}},
  booktitle = {Proceedings 2019 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Zhao, Qingchuan and Zuo, Chaoshun and Pellegrino, Giancarlo and Lin, Zhiqiang},
  date = {2019},
  publisher = {Internet Society},
  location = {San Diego, CA},
  doi = {10.14722/ndss.2019.23052},
  url = {https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01A-5_Zhao_paper.pdf},
  urldate = {2022-12-27},
  abstract = {Increasingly, mobile application-based ride-hailing services have become a very popular means of transportation. Due to the handling of business logic, these services also contain a wealth of privacy-sensitive information such as GPS locations, car plates, driver licenses, and payment data. Unlike many of the mobile applications in which there is only one type of users, ride-hailing services face two types of users: riders and drivers. While most of the efforts had focused on the rider’s privacy, unfortunately, we notice little has been done to protect drivers. To raise the awareness of the privacy issues with drivers, in this paper we perform the first systematic study of the drivers’ sensitive data leakage in ride-hailing services. More specifically, we select 20 popular ride-hailing apps including Uber and Lyft and focus on one particular feature, namely the nearby cars feature. Surprisingly, our experimental results show that largescale data harvesting of drivers is possible for all of the ridehailing services we studied. In particular, attackers can determine with high-precision the driver’s privacy-sensitive information including mostly visited address (e.g., home) and daily driving behaviors. Meanwhile, attackers can also infer sensitive information about the business operations and performances of ride-hailing services such as the number of rides, utilization of cars, and presence on the territory. In addition to presenting the attacks, we also shed light on the countermeasures the service providers could take to protect the driver’s sensitive information.},
  eventtitle = {Network and {{Distributed System Security Symposium}}},
  isbn = {978-1-891562-55-6},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/29LTT2VJ/Zhao 等 - 2019 - Geo-locating Drivers A Study of Sensitive Data Le.pdf}
}

@inproceedings{zuoWhyDoesYour2019,
  title = {Why {{Does Your Data Leak}}? {{Uncovering}} the {{Data Leakage}} in {{Cloud}} from {{Mobile Apps}}},
  shorttitle = {Why {{Does Your Data Leak}}?},
  booktitle = {2019 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  author = {Zuo, Chaoshun and Lin, Zhiqiang and Zhang, Yinqian},
  date = {2019-05},
  pages = {1296--1310},
  publisher = {IEEE},
  location = {San Francisco, CA, USA},
  doi = {10.1109/SP.2019.00009},
  url = {https://ieeexplore.ieee.org/document/8835301/},
  urldate = {2022-12-27},
  abstract = {Increasingly, more and more mobile applications (apps for short) are using the cloud as the back-end, in particular the cloud APIs, for data storage, data analytics, message notification, and monitoring. Unfortunately, we have recently witnessed massive data leaks from the cloud, ranging from personally identifiable information to corporate secrets. In this paper, we seek to understand why such significant leaks occur and design tools to automatically identify them. To our surprise, our study reveals that lack of authentication, misuse of various keys (e.g., normal user keys and superuser keys) in authentication, or misconfiguration of user permissions in authorization are the root causes. Then, we design a set of automated program analysis techniques including obfuscation-resilient cloud API identification and string value analysis, and implement them in a tool called LeakScope to identify the potential data leakage vulnerabilities from mobile apps based on how the cloud APIs are used. Our evaluation with over 1.6 million mobile apps from the Google Play Store has uncovered 15, 098 app servers managed by mainstream cloud providers such as Amazon, Google, and Microsoft that are subject to data leakage attacks. We have made responsible disclosure to each of the cloud service providers, and they have all confirmed the vulnerabilities we have identified and are actively working with the mobile app developers to patch their vulnerable services.},
  eventtitle = {2019 {{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  isbn = {978-1-5386-6660-9},
  langid = {english},
  file = {/Users/feymanpaper/Zotero/storage/V8C5MWHZ/Zuo 等 - 2019 - Why Does Your Data Leak Uncovering the Data Leaka.pdf}
}
